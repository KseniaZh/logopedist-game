{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\logopedist-game\\\\src\\\\containers\\\\Automation\\\\TypesLetters.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport { selectingLetter } from '../../store/LettersBlocks/actionsLetters';\nimport { changeLettersBlocks } from '../../store/LettersBlocks/actionsLettersBlocks';\n\nfunction TypesLetters(props) {\n  _s();\n\n  const dispatch = useDispatch();\n  const stateLettersRedux = useSelector(state => state.stateLettersBlocks);\n  const letters = useSelector(state => state.stateLetters.letters);\n\n  const hendlerClick = letterName => {\n    dispatch(selectingLetter(letterName));\n    dispatch(changeLettersBlocks(stateLettersRedux, letterName));\n  }; //const arc = 2 * Math.PI * (1 / items.length);\n  ////радиус круга\n  //const radius = 40;\n  //for (let i = 0; i < button.length; i++) {\n  //    button[i].addEventListener('click', function (event) {\n  //        //отменяем действие по умолчанию на ссылке\n  //        event.preventDefault();\n  //        // если не активна, навешиваем класс и открываем\n  //        if (active == false) {\n  //            button[i].classList.add('circular-menu__button_active');\n  //            active = true; // сохраняем в переменной статус активности\n  //            // перебираем все элементы, вычисляем координаты\n  //            for (let j = 0; j < items.length; j++) {\n  //                const angle = j * arc;\n  //                const x = radius * Math.cos(angle);\n  //                const y = radius * Math.sin(angle);\n  //                //устанавливаем координаты каждому элементу\n  //                items[j].style.left = 50 + x + '%';\n  //                items[j].style.top = 50 + y + '%';\n  //            };\n\n\n  const Y = 2 * Math.PI * (1 / letters.length); //радиус круга\n\n  const radius = 40;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u0421\\u041B\\u041E-\\u0413\\u0418\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this), letters.map((item, index) => {\n      if (item.type === 2) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => hendlerClick(item.name),\n          style: {\n            left: `${50 + radius * Math.cos(index * Y) + '%'}`,\n            top: `${50 + radius * Math.sin(index * Y) + '%'}`\n          },\n          children: /*#__PURE__*/_jsxDEV(NavLink, {\n            to: `/automation/${item.type}/${item.name}/LevelBlock_1`,\n            children: item.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 29\n          }, this)\n        }, index + \"TypesLetters\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 32\n        }, this);\n      }\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TypesLetters, \"p/jS7Zs48LAMBmWNY/18du71j34=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = TypesLetters;\nexport default connect()(TypesLetters);\n\nvar _c;\n\n$RefreshReg$(_c, \"TypesLetters\");","map":{"version":3,"sources":["D:/Обучение/React/projects/logopedist-game/src/containers/Automation/TypesLetters.js"],"names":["React","NavLink","connect","useDispatch","useSelector","selectingLetter","changeLettersBlocks","TypesLetters","props","dispatch","stateLettersRedux","state","stateLettersBlocks","letters","stateLetters","hendlerClick","letterName","Y","Math","PI","length","radius","map","item","index","type","name","left","cos","top","sin"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,OAAT,EAAkBC,WAAlB,EAA+BC,WAA/B,QAAkD,aAAlD;AAEA,SAASC,eAAT,QAAgC,0CAAhC;AACA,SACIC,mBADJ,QAEO,gDAFP;;AAKA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAAA;;AAEzB,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AAEA,QAAMO,iBAAiB,GAAGN,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACC,kBAAhB,CAArC;AACA,QAAMC,OAAO,GAAGT,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACG,YAAN,CAAmBD,OAA7B,CAA3B;;AAEA,QAAME,YAAY,GAAIC,UAAD,IAAgB;AACjCP,IAAAA,QAAQ,CAACJ,eAAe,CAACW,UAAD,CAAhB,CAAR;AACAP,IAAAA,QAAQ,CAACH,mBAAmB,CAACI,iBAAD,EAAoBM,UAApB,CAApB,CAAR;AACH,GAHD,CAPyB,CAYzB;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AACA,QAAMC,CAAC,GAAG,IAAIC,IAAI,CAACC,EAAT,IAAe,IAAEN,OAAO,CAACO,MAAzB,CAAV,CApCyB,CAqCzB;;AACA,QAAMC,MAAM,GAAG,EAAf;AAEA,sBACA;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAIYR,OAAO,CAACS,GAAR,CAAY,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAEzB,UAAID,IAAI,CAACE,IAAL,KAAc,CAAlB,EAAqB;AACjB,4BAAO;AAEH,UAAA,OAAO,EAAE,MAAMV,YAAY,CAACQ,IAAI,CAACG,IAAN,CAFxB;AAGH,UAAA,KAAK,EAAE;AAAEC,YAAAA,IAAI,EAAG,GAAE,KAAKN,MAAM,GAAGH,IAAI,CAACU,GAAL,CAASJ,KAAK,GAAGP,CAAjB,CAAd,GAAoC,GAAI,EAAnD;AAAsDY,YAAAA,GAAG,EAAG,GAAE,KAAKR,MAAM,GAAGH,IAAI,CAACY,GAAL,CAASN,KAAK,GAAGP,CAAjB,CAAd,GAAoC,GAAI;AAAtG,WAHJ;AAAA,iCAKH,QAAC,OAAD;AAAS,YAAA,EAAE,EAAG,eAAcM,IAAI,CAACE,IAAK,IAAGF,IAAI,CAACG,IAAK,eAAnD;AAAA,sBAAoEH,IAAI,CAACG;AAAzE;AAAA;AAAA;AAAA;AAAA;AALG,WACEF,KAAK,GAAG,cADV;AAAA;AAAA;AAAA;AAAA,gBAAP;AAOH;AACJ,KAXD,CAJZ;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAqBH;;GA7DQjB,Y;UAEYJ,W,EAESC,W,EACVA,W;;;KALXG,Y;AAgET,eAAeL,OAAO,GAAGK,YAAH,CAAtB","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { selectingLetter } from '../../store/LettersBlocks/actionsLetters';\r\nimport {\r\n    changeLettersBlocks,\r\n} from '../../store/LettersBlocks/actionsLettersBlocks';\r\n\r\n\r\nfunction TypesLetters(props) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const stateLettersRedux = useSelector(state => state.stateLettersBlocks);\r\n    const letters = useSelector(state => state.stateLetters.letters);\r\n\r\n    const hendlerClick = (letterName) => {\r\n        dispatch(selectingLetter(letterName));\r\n        dispatch(changeLettersBlocks(stateLettersRedux, letterName));\r\n    };\r\n\r\n    //const arc = 2 * Math.PI * (1 / items.length);\r\n    ////радиус круга\r\n    //const radius = 40;\r\n\r\n    //for (let i = 0; i < button.length; i++) {\r\n    //    button[i].addEventListener('click', function (event) {\r\n    //        //отменяем действие по умолчанию на ссылке\r\n    //        event.preventDefault();\r\n\r\n    //        // если не активна, навешиваем класс и открываем\r\n    //        if (active == false) {\r\n    //            button[i].classList.add('circular-menu__button_active');\r\n    //            active = true; // сохраняем в переменной статус активности\r\n\r\n    //            // перебираем все элементы, вычисляем координаты\r\n    //            for (let j = 0; j < items.length; j++) {\r\n    //                const angle = j * arc;\r\n    //                const x = radius * Math.cos(angle);\r\n    //                const y = radius * Math.sin(angle);\r\n\r\n    //                //устанавливаем координаты каждому элементу\r\n    //                items[j].style.left = 50 + x + '%';\r\n    //                items[j].style.top = 50 + y + '%';\r\n    //            };\r\n    const Y = 2 * Math.PI * (1/letters.length);\r\n    //радиус круга\r\n    const radius = 40;\r\n\r\n    return(\r\n    <div>\r\n        <div>СЛО-ГИ</div>\r\n\r\n        {\r\n                letters.map((item, index) => {\r\n\r\n                    if (item.type === 2) {\r\n                        return <div\r\n                            key={index + \"TypesLetters\"}\r\n                            onClick={() => hendlerClick(item.name)}\r\n                            style={{ left: `${50 + radius * Math.cos(index * Y) + '%'}`, top: `${50 + radius * Math.sin(index * Y) + '%'}` }}\r\n                        >\r\n                            <NavLink to={`/automation/${item.type}/${item.name}/LevelBlock_1`}>{item.name}</NavLink>\r\n                        </div>\r\n                    }\r\n                })\r\n        }\r\n \r\n    </div>\r\n    )\r\n}\r\n\r\n\r\nexport default connect()(TypesLetters)\r\n\r\n"]},"metadata":{},"sourceType":"module"}