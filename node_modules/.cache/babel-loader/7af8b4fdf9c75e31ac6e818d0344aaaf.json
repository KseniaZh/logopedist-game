{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\logopedist-game\\\\src\\\\containers\\\\Automation\\\\TypesLetters.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport { selectingLetter } from '../../store/LettersBlocks/actionsLetters';\nimport { changeLettersBlocks } from '../../store/LettersBlocks/actionsLettersBlocks';\n\nfunction TypesLetters(props) {\n  _s();\n\n  const dispatch = useDispatch();\n  const stateLettersRedux = useSelector(state => state.stateLettersBlocks);\n  const letters = useSelector(state => state.stateLetters.letters);\n\n  const hendlerClick = letterName => {\n    dispatch(selectingLetter(letterName));\n    dispatch(changeLettersBlocks(stateLettersRedux, letterName));\n  }; //if (active == false) {\n  //    button[i].classList.add('circular-menu__button_active');\n  //    active = true; // сохраняем в переменной статус активности\n  //    // перебираем все элементы, вычисляем координаты\n  //    for (let j = 0; j < items.length; j++) {\n  //        const angle = j * arc;\n  //        const x = radius * Math.cos(angle);\n  //        const y = radius * Math.sin(angle);\n  //        //устанавливаем координаты каждому элементу\n  //        items[j].style.left = 50 + x + '%';\n  //        items[j].style.top = 50 + y + '%';\n  //    };\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"circular\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"circular-menu\",\n      children: [letters.map((item, index) => {\n        if (item.type === 2) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => hendlerClick(item.name),\n            className: \"circular-menu__button_active\",\n            style: {\n              left: '`${50 + radius * Math.cos(index * arc)}`%',\n              right: '`${50 + radius * Math.sin(index * arc)}`%'\n            },\n            children: /*#__PURE__*/_jsxDEV(NavLink, {\n              to: `/automation/${item.type}/${item.name}/LevelBlock_1`,\n              children: item.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 41\n            }, this)\n          }, index + \"TypesLetters\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 36\n          }, this);\n        }\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"circular-menu__button\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          class: \"circular-menu__lines\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TypesLetters, \"p/jS7Zs48LAMBmWNY/18du71j34=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = TypesLetters;\nexport default connect()(TypesLetters);\n\nvar _c;\n\n$RefreshReg$(_c, \"TypesLetters\");","map":{"version":3,"sources":["D:/Обучение/React/projects/logopedist-game/src/containers/Automation/TypesLetters.js"],"names":["React","NavLink","connect","useDispatch","useSelector","selectingLetter","changeLettersBlocks","TypesLetters","props","dispatch","stateLettersRedux","state","stateLettersBlocks","letters","stateLetters","hendlerClick","letterName","map","item","index","type","name","left","right"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,OAAT,EAAkBC,WAAlB,EAA+BC,WAA/B,QAAkD,aAAlD;AAEA,SAASC,eAAT,QAAgC,0CAAhC;AACA,SACIC,mBADJ,QAEO,gDAFP;;AAKA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAAA;;AAEzB,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AAEA,QAAMO,iBAAiB,GAAGN,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACC,kBAAhB,CAArC;AACA,QAAMC,OAAO,GAAGT,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACG,YAAN,CAAmBD,OAA7B,CAA3B;;AAEA,QAAME,YAAY,GAAIC,UAAD,IAAgB;AACjCP,IAAAA,QAAQ,CAACJ,eAAe,CAACW,UAAD,CAAhB,CAAR;AACAP,IAAAA,QAAQ,CAACH,mBAAmB,CAACI,iBAAD,EAAoBM,UAApB,CAApB,CAAR;AACH,GAHD,CAPyB,CAYzB;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA,sBACA;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,iBAEYH,OAAO,CAACI,GAAR,CAAY,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAEzB,YAAID,IAAI,CAACE,IAAL,KAAc,CAAlB,EAAqB;AACjB,8BAAO;AAEH,YAAA,OAAO,EAAE,MAAML,YAAY,CAACG,IAAI,CAACG,IAAN,CAFxB;AAGH,YAAA,SAAS,EAAC,8BAHP;AAIH,YAAA,KAAK,EAAE;AAAEC,cAAAA,IAAI,EAAE,2CAAR;AAAqDC,cAAAA,KAAK,EAAE;AAA5D,aAJJ;AAAA,mCAMK,QAAC,OAAD;AAAS,cAAA,EAAE,EAAG,eAAcL,IAAI,CAACE,IAAK,IAAGF,IAAI,CAACG,IAAK,eAAnD;AAAA,wBAAoEH,IAAI,CAACG;AAAzE;AAAA;AAAA;AAAA;AAAA;AANL,aACEF,KAAK,GAAG,cADV;AAAA;AAAA;AAAA;AAAA,kBAAP;AAQH;AACJ,OAZD,CAFZ,eAgBI;AAAK,QAAA,KAAK,EAAC,uBAAX;AAAA,+BACI;AAAM,UAAA,KAAK,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADA;AAwBH;;GAnDQZ,Y;UAEYJ,W,EAESC,W,EACVA,W;;;KALXG,Y;AAsDT,eAAeL,OAAO,GAAGK,YAAH,CAAtB","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { selectingLetter } from '../../store/LettersBlocks/actionsLetters';\r\nimport {\r\n    changeLettersBlocks,\r\n} from '../../store/LettersBlocks/actionsLettersBlocks';\r\n\r\n\r\nfunction TypesLetters(props) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const stateLettersRedux = useSelector(state => state.stateLettersBlocks);\r\n    const letters = useSelector(state => state.stateLetters.letters);\r\n\r\n    const hendlerClick = (letterName) => {\r\n        dispatch(selectingLetter(letterName));\r\n        dispatch(changeLettersBlocks(stateLettersRedux, letterName));\r\n    };\r\n\r\n    //if (active == false) {\r\n    //    button[i].classList.add('circular-menu__button_active');\r\n    //    active = true; // сохраняем в переменной статус активности\r\n\r\n    //    // перебираем все элементы, вычисляем координаты\r\n    //    for (let j = 0; j < items.length; j++) {\r\n    //        const angle = j * arc;\r\n    //        const x = radius * Math.cos(angle);\r\n    //        const y = radius * Math.sin(angle);\r\n\r\n    //        //устанавливаем координаты каждому элементу\r\n    //        items[j].style.left = 50 + x + '%';\r\n    //        items[j].style.top = 50 + y + '%';\r\n    //    };\r\n\r\n    return(\r\n    <div className=\"circular\">\r\n        <div className=\"circular-menu\">\r\n            {\r\n                    letters.map((item, index) => {\r\n\r\n                        if (item.type === 2) {\r\n                            return <div\r\n                                key={index + \"TypesLetters\"}\r\n                                onClick={() => hendlerClick(item.name)}\r\n                                className='circular-menu__button_active'\r\n                                style={{ left: '`${50 + radius * Math.cos(index * arc)}`%', right: '`${50 + radius * Math.sin(index * arc)}`%'}}\r\n                                    >\r\n                                        <NavLink to={`/automation/${item.type}/${item.name}/LevelBlock_1`}>{item.name}</NavLink>\r\n                                    </div>\r\n                        }\r\n                    })\r\n            }\r\n            <div class=\"circular-menu__button\">\r\n                <span class=\"circular-menu__lines\"></span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\n\r\nexport default connect()(TypesLetters)\r\n\r\n"]},"metadata":{},"sourceType":"module"}