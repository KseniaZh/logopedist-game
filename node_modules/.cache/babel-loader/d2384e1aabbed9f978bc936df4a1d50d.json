{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\react-website\\\\src\\\\containers\\\\Navigation\\\\Header.js\";\nimport React, { useState } from 'react';\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport ButtonLink from '../../UserInterface/Buttons/ButtonLink';\n\nfunction Header(props) {\n  const buttonsNav = [{\n    to: '/',\n    name: 'Home'\n  }, {\n    to: '/about',\n    name: 'About'\n  }, {\n    to: '/products',\n    name: 'Products'\n  }, {\n    to: '/productsAbout',\n    name: 'ProductsAbout'\n  }];\n  return /*#__PURE__*/_jsxDEV(\"header\", {\n    children: buttonsNav.map((buttonNav, index) => /*#__PURE__*/_jsxDEV(ButtonLink, {\n      to: buttonNav.to,\n      name: buttonNav.name,\n      onclick: () => console - log(\"klick \", buttonNav.name),\n      tabIndex: index + 2\n    }, index + 2, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 55\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Header;\nexport default connect()(Header); //function Header(props) {\n//    const dispatch = useDispatch();\n//    const login = useSelector(state => state.stateAuthorization.user.login);\n//    const [isOpen, setIsOpen] = useState(false);\n//    const hendlerNavigationToggle = () => {\n//        if (isOpen === false) {\n//            dispatch(saveDataStore({}));\n//        }\n//        setIsOpen(!isOpen);\n//    };\n//    const navStyle = [stateStylesAll[staleSelect].navigation];\n//    if (!isOpen) {\n//        navStyle.push(\"close\");\n//    };\n//    const pages = [\n//        {\n//            to: '/',\n//            name: 'Home'\n//        },\n//        {\n//            to: '/EltypeClass',\n//            name: 'EltypeClass'\n//        },\n//        {\n//            to: '/ViewType',\n//            name: 'ViewType'\n//        }\n//    ]\n//    // логика всплывающей подсказки спрятана в обертку hoc, \n//    // обертка кнопок и подсказка реализованы в ButtonNavigationSmall и ButtonNavigation\n//    const ButtonNavigationSmall = withHoverDescription(ButtonLinkSmall, DescriptionNavigation);\n//    const ButtonNavigation = withHoverDescription(ButtonLink, DescriptionNavigation);\n//    return (\n//        <header>\n//            <nav className={navStyle.join(' ')}>\n//                <ButtonNavigationSmall\n//                    to='/Personalize'\n//                    icon=\"fa fa-user-circle-o\"\n//                    classname={stateStylesAll[staleSelect].personalizeButton}\n//                    name='Personalize'\n//                    onclick={() => setIsOpen(false)}\n//                    tabindex=\"-1\"\n//                    haveDescription={isOpen}\n//                    classnameDescription={stateStylesAll[staleSelect].navigationLinkAbout}\n//                />\n//                {\n//                    login === \"administrator\" ?\n//                        <ButtonNavigation\n//                            to='/User'\n//                            name='User'\n//                            onclick={() => setIsOpen(false)}\n//                            classname={stateStylesAll[staleSelect].navigationButtonLink}\n//                            tabIndex='2'\n//                            haveDescription={isOpen}\n//                            classnameDescription={stateStylesAll[staleSelect].navigationLinkAbout}\n//                        />\n//                        : null\n//                }\n//                {\n//                    pages.map((page, index) =>\n//                        <ButtonNavigation\n//                            to={page.to}\n//                            name={page.name}\n//                            onclick={() => setIsOpen(false)}\n//                            classname={stateStylesAll[staleSelect].navigationButtonLink}\n//                            tabIndex={index + 2}\n//                            key={index + 2}\n//                            haveDescription={isOpen}\n//                            classnameDescription={stateStylesAll[staleSelect].navigationLinkAbout}\n//                        />)\n//                }\n//            </nav>\n//            {\n//                isOpen ?\n//                    <NavigationWindowBlind\n//                        onclick={() => setIsOpen(false)}\n//                        classname={stateStylesAll[staleSelect].navigationWindowBlind}\n//                    />\n//                    : null\n//            }\n//            <NavigationToggle\n//                openNavigation={hendlerNavigationToggle}\n//                isOpen={isOpen}\n//                classname={stateStylesAll[staleSelect].navigationToggle}\n//            />\n//        </header>\n//    )\n//}\n//export default connect()(Header)\n\nvar _c;\n\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"sources":["D:/Обучение/React/projects/react-website/src/containers/Navigation/Header.js"],"names":["React","useState","connect","useDispatch","useSelector","ButtonLink","Header","props","buttonsNav","to","name","map","buttonNav","index","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,EAAkBC,WAAlB,EAA+BC,WAA/B,QAAkD,aAAlD;AAEA,OAAOC,UAAP,MAAuB,wCAAvB;;AAGA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AAElB,QAAMC,UAAU,GAAG,CAChB;AACIC,IAAAA,EAAE,EAAE,GADR;AAEIC,IAAAA,IAAI,EAAE;AAFV,GADgB,EAKhB;AACID,IAAAA,EAAE,EAAE,QADR;AAEIC,IAAAA,IAAI,EAAE;AAFV,GALgB,EAShB;AACID,IAAAA,EAAE,EAAE,WADR;AAEIC,IAAAA,IAAI,EAAE;AAFV,GATgB,EAaf;AACID,IAAAA,EAAE,EAAE,gBADR;AAEIC,IAAAA,IAAI,EAAE;AAFV,GAbe,CAAnB;AAmBD,sBACI;AAAA,cAEQF,UAAU,CAACG,GAAX,CAAgB,CAACC,SAAD,EAAYC,KAAZ,kBAAsB,QAAC,UAAD;AAC1B,MAAA,EAAE,EAAED,SAAS,CAACH,EADY;AAE1B,MAAA,IAAI,EAAEG,SAAS,CAACF,IAFU;AAG1B,MAAA,OAAO,EAAE,MAAMI,OAAO,GAACC,GAAG,CAAC,QAAD,EAAWH,SAAS,CAACF,IAArB,CAHA;AAI1B,MAAA,QAAQ,EAAEG,KAAK,GAAG;AAJQ,OAKrBA,KAAK,GAAG,CALa;AAAA;AAAA;AAAA;AAAA,YAAtC;AAFR;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH;;KApCQP,M;AAqCT,eAAeJ,OAAO,GAAGI,MAAH,CAAtB,C,CAGA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import React, { useState } from 'react';\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport ButtonLink from '../../UserInterface/Buttons/ButtonLink';\r\n\r\n\r\nfunction Header(props) {\r\n\r\n     const buttonsNav = [\r\n        {\r\n            to: '/',\r\n            name: 'Home'\r\n        },\r\n        {\r\n            to: '/about',\r\n            name: 'About'\r\n        },\r\n        {\r\n            to: '/products',\r\n            name: 'Products'\r\n         },\r\n         {\r\n             to: '/productsAbout',\r\n             name: 'ProductsAbout'\r\n         }\r\n    ]\r\n\r\n    return (\r\n        <header>\r\n            {\r\n                buttonsNav.map( (buttonNav, index) => <ButtonLink\r\n                            to={buttonNav.to}\r\n                            name={buttonNav.name}\r\n                            onclick={() => console-log(\"klick \", buttonNav.name)}\r\n                            tabIndex={index + 2}\r\n                            key={index + 2}\r\n                        />\r\n                )\r\n            }\r\n\r\n        </header>\r\n    )\r\n}\r\nexport default connect()(Header)\r\n\r\n\r\n//function Header(props) {\r\n\r\n//    const dispatch = useDispatch();\r\n//    const login = useSelector(state => state.stateAuthorization.user.login);\r\n\r\n\r\n//    const [isOpen, setIsOpen] = useState(false);\r\n\r\n//    const hendlerNavigationToggle = () => {\r\n//        if (isOpen === false) {\r\n//            dispatch(saveDataStore({}));\r\n//        }\r\n//        setIsOpen(!isOpen);\r\n//    };\r\n\r\n//    const navStyle = [stateStylesAll[staleSelect].navigation];\r\n//    if (!isOpen) {\r\n//        navStyle.push(\"close\");\r\n//    };\r\n\r\n//    const pages = [\r\n//        {\r\n//            to: '/',\r\n//            name: 'Home'\r\n//        },\r\n//        {\r\n//            to: '/EltypeClass',\r\n//            name: 'EltypeClass'\r\n//        },\r\n//        {\r\n//            to: '/ViewType',\r\n//            name: 'ViewType'\r\n//        }\r\n//    ]\r\n//    // логика всплывающей подсказки спрятана в обертку hoc, \r\n//    // обертка кнопок и подсказка реализованы в ButtonNavigationSmall и ButtonNavigation\r\n//    const ButtonNavigationSmall = withHoverDescription(ButtonLinkSmall, DescriptionNavigation);\r\n//    const ButtonNavigation = withHoverDescription(ButtonLink, DescriptionNavigation);\r\n\r\n//    return (\r\n//        <header>\r\n//            <nav className={navStyle.join(' ')}>\r\n\r\n//                <ButtonNavigationSmall\r\n//                    to='/Personalize'\r\n//                    icon=\"fa fa-user-circle-o\"\r\n//                    classname={stateStylesAll[staleSelect].personalizeButton}\r\n//                    name='Personalize'\r\n//                    onclick={() => setIsOpen(false)}\r\n//                    tabindex=\"-1\"\r\n//                    haveDescription={isOpen}\r\n//                    classnameDescription={stateStylesAll[staleSelect].navigationLinkAbout}\r\n//                />\r\n//                {\r\n//                    login === \"administrator\" ?\r\n//                        <ButtonNavigation\r\n//                            to='/User'\r\n//                            name='User'\r\n//                            onclick={() => setIsOpen(false)}\r\n//                            classname={stateStylesAll[staleSelect].navigationButtonLink}\r\n//                            tabIndex='2'\r\n//                            haveDescription={isOpen}\r\n//                            classnameDescription={stateStylesAll[staleSelect].navigationLinkAbout}\r\n//                        />\r\n//                        : null\r\n//                }\r\n//                {\r\n//                    pages.map((page, index) =>\r\n//                        <ButtonNavigation\r\n//                            to={page.to}\r\n//                            name={page.name}\r\n//                            onclick={() => setIsOpen(false)}\r\n//                            classname={stateStylesAll[staleSelect].navigationButtonLink}\r\n//                            tabIndex={index + 2}\r\n//                            key={index + 2}\r\n//                            haveDescription={isOpen}\r\n//                            classnameDescription={stateStylesAll[staleSelect].navigationLinkAbout}\r\n//                        />)\r\n//                }\r\n\r\n//            </nav>\r\n\r\n//            {\r\n//                isOpen ?\r\n//                    <NavigationWindowBlind\r\n//                        onclick={() => setIsOpen(false)}\r\n//                        classname={stateStylesAll[staleSelect].navigationWindowBlind}\r\n//                    />\r\n//                    : null\r\n//            }\r\n\r\n//            <NavigationToggle\r\n//                openNavigation={hendlerNavigationToggle}\r\n//                isOpen={isOpen}\r\n//                classname={stateStylesAll[staleSelect].navigationToggle}\r\n//            />\r\n\r\n//        </header>\r\n//    )\r\n//}\r\n//export default connect()(Header)\r\n\r\n"]},"metadata":{},"sourceType":"module"}