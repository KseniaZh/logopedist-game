{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\logopedist-game\\\\src\\\\components\\\\WordsAutomation\\\\WordBlocks.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport FlagsLevelsСompleted from '../../containers/Automation/FlagsLevelsСompleted';\nimport SelectingLevelBlock from '../../UserInterface/SelectingLevelBlock';\nimport LevelBlockWord from '../../components/WordsAutomation/LevelBlockWord';\nimport { sourceStateLettersBlocks } from '../../store/LettersBlocks/actionsLettersBlocks';\nimport { changeFlagLevelWordCompleted } from '../../store/LevelCompleted/actionsLevelWordsFinal';\n\nfunction WordBlocks(props) {\n  _s();\n\n  const dispatch = useDispatch();\n  const letterSelect = useSelector(state => state.stateLetters.letterSelect);\n  const namesLevelBlock = useSelector(state => state.stateLevelCoins.wordsBlocks);\n  const stateLevelWordsFinal = useSelector(state => state.stateLevelWordsFinal); //флаги пройденных блоков в листе\n\n  const stateWords = useSelector(state => state.stateWords);\n  const [numberWordBlock, setNumberWordBlock] = useState(0); //счетчик переключиния слов, в массиве 10 слов\n\n  const [counter, setCounter] = useState(0);\n\n  const hendlerSelectWordBlock = data => {\n    setNumberWordBlock(data);\n    setCounter(0);\n  };\n\n  const coin = useSelector(state => state.stateLevelCoins.wordsBlocks[numberWordBlock]);\n\n  const hendlerClickWord = numberWord => {\n    setCounter(numberWord);\n\n    if (numberWord === 10) {\n      dispatch(changeFlagLevelWordCompleted(stateLevelWordsFinal, letterSelect, numberWordBlock));\n      setCounter(0);\n    }\n  };\n\n  useEffect(() => {\n    return () => {\n      dispatch(sourceStateLettersBlocks());\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"automation-buttons-blocks\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\u0422\\u0438\\u043F \\u0431\\u0443\\u043A\\u0432\\u044B \", props.typeLetter, \" \\u0431\\u0443\\u043A\\u0432\\u0430 \", letterSelect, /*#__PURE__*/_jsxDEV(SelectingLevelBlock, {\n        numbersLevelBlock: Object.keys(stateWords[letterSelect]),\n        namesLevels: namesLevelBlock,\n        onclick: hendlerSelectWordBlock,\n        levelsComplied: stateLevelWordsFinal[letterSelect]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(LevelBlockWord, {\n      onclickWord: hendlerClickWord,\n      data: counter + 1,\n      name: stateWords[letterSelect][numberWordBlock][counter],\n      flagLevelFinal: stateLevelWordsFinal[letterSelect][numberWordBlock],\n      coin: coin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FlagsLevelsСompleted, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n\n_s(WordBlocks, \"LaQk4T1x81N4Dv3trkaDAPApzpY=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = WordBlocks;\nexport default connect()(WordBlocks); //{\n//    stateLevelEnd['letter'][letterSelect] ?\n//        <div>ГОТОВО</div>\n//        : <div>ИСПЫТАНИЕ</div>\n//}\n\nvar _c;\n\n$RefreshReg$(_c, \"WordBlocks\");","map":{"version":3,"sources":["D:/Обучение/React/projects/logopedist-game/src/components/WordsAutomation/WordBlocks.js"],"names":["React","useEffect","useState","connect","useDispatch","useSelector","FlagsLevelsСompleted","SelectingLevelBlock","LevelBlockWord","sourceStateLettersBlocks","changeFlagLevelWordCompleted","WordBlocks","props","dispatch","letterSelect","state","stateLetters","namesLevelBlock","stateLevelCoins","wordsBlocks","stateLevelWordsFinal","stateWords","numberWordBlock","setNumberWordBlock","counter","setCounter","hendlerSelectWordBlock","data","coin","hendlerClickWord","numberWord","typeLetter","Object","keys"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport FlagsLevelsСompleted from '../../containers/Automation/FlagsLevelsСompleted';\r\nimport SelectingLevelBlock from '../../UserInterface/SelectingLevelBlock';\r\nimport LevelBlockWord from '../../components/WordsAutomation/LevelBlockWord';\r\n\r\nimport {\r\n    sourceStateLettersBlocks,\r\n} from '../../store/LettersBlocks/actionsLettersBlocks';\r\nimport {\r\n    changeFlagLevelWordCompleted\r\n} from '../../store/LevelCompleted/actionsLevelWordsFinal';\r\n\r\nfunction WordBlocks(props) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const letterSelect = useSelector(state => state.stateLetters.letterSelect);\r\n    const namesLevelBlock = useSelector(state => state.stateLevelCoins.wordsBlocks);\r\n    const stateLevelWordsFinal = useSelector(state => state.stateLevelWordsFinal); //флаги пройденных блоков в листе\r\n    const stateWords = useSelector(state => state.stateWords);\r\n    \r\n    const [numberWordBlock, setNumberWordBlock] = useState(0);\r\n    //счетчик переключиния слов, в массиве 10 слов\r\n    const [counter, setCounter] = useState(0);\r\n\r\n    const hendlerSelectWordBlock = (data) => {\r\n        setNumberWordBlock(data);\r\n        setCounter(0);\r\n    };\r\n    const coin = useSelector(state => state.stateLevelCoins.wordsBlocks[numberWordBlock]);\r\n\r\n\r\n \r\n    const hendlerClickWord = (numberWord) => {\r\n        setCounter(numberWord);\r\n        if (numberWord === 10) {\r\n            dispatch(changeFlagLevelWordCompleted(stateLevelWordsFinal, letterSelect, numberWordBlock));\r\n            setCounter(0);\r\n\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(sourceStateLettersBlocks());\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"automation-buttons-blocks\">\r\n\r\n\r\n            <div>\r\n                Тип буквы {props.typeLetter} буква {letterSelect}\r\n\r\n                <SelectingLevelBlock\r\n                    numbersLevelBlock={Object.keys(stateWords[letterSelect])}\r\n                    namesLevels={namesLevelBlock}\r\n                    onclick={hendlerSelectWordBlock}\r\n                    levelsComplied={stateLevelWordsFinal[letterSelect]}\r\n                />\r\n            </div>\r\n\r\n            <LevelBlockWord\r\n                onclickWord={hendlerClickWord}\r\n                data={counter + 1}\r\n                name={stateWords[letterSelect][numberWordBlock][counter]}\r\n                flagLevelFinal={stateLevelWordsFinal[letterSelect][numberWordBlock]}\r\n                coin={coin}\r\n            />\r\n\r\n            <FlagsLevelsСompleted />\r\n               \r\n        </div>\r\n        \r\n     )\r\n}\r\n\r\nexport default connect()(WordBlocks)\r\n\r\n\r\n//{\r\n//    stateLevelEnd['letter'][letterSelect] ?\r\n//        <div>ГОТОВО</div>\r\n//        : <div>ИСПЫТАНИЕ</div>\r\n//}\r\n"]},"metadata":{},"sourceType":"module"}