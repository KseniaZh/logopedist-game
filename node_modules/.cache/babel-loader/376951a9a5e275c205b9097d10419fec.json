{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\logopedist-game\\\\src\\\\containers\\\\WordsAutomation\\\\WordBlocks.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport BoxCoinsLevelCompleted from '../../components/Completed/BoxCoinsLevelCompleted';\nimport SelectingLevelBlock from '../../UserInterface/SelectingLevelBlock';\nimport LevelBlockWord from '../../components/WordsAutomation/LevelBlockWord';\nimport { sourceStateLettersBlocks } from '../../store/LettersBlocks/actionsLettersBlocks';\nimport { changeFlagLevelWordCompleted, nullFlagLevelWordCompleted, takePrizeAllFlagsLevelsWordsNull } from '../../store/LevelCompleted/actionsLevelWordsFinal';\nimport { finalLetterWords, takePrizeFlagFinalWordsNull } from '../../store/LevelCompleted/actionsFinalLetterWords';\nimport { boxCoinsDeposit } from '../../store/Coins/actionsLevelCoins';\n\nfunction WordBlocks(props) {\n  _s();\n\n  const dispatch = useDispatch();\n  const letterSelect = useSelector(state => state.stateLetters.letterSelect); //выбрана буква\n\n  const stateWords = useSelector(state => state.stateWords); //массивы слов для вывода в уровни\n\n  const boxCoinsLetter = useSelector(state => state.stateLevelCoins.boxCoinsLetter); // банка с наградами\n\n  const coins = useSelector(state => state.stateLevelCoins.wordsBlocks); // массив со значками наград\n\n  const stateLevelWordsFinal = useSelector(state => state.stateLevelWordsFinal); //флаги прохождения уровней в букве\n\n  const stateFinalLetterWords = useSelector(state => state.stateFinalLetterWords); // флаги прохождения буквы\n\n  const [numberWordBlock, setNumberWordBlock] = useState(0); // номер уровня\n\n  const [counter, setCounter] = useState(0); //счетчик переключиния слов, в массиве 10 слов\n\n  const hendlerSelectWordBlock = data => {\n    setNumberWordBlock(data);\n    setCounter(0);\n  };\n\n  const hendlerClickWord = numberWord => {\n    setCounter(numberWord);\n\n    if (numberWord === 10) {\n      dispatch(changeFlagLevelWordCompleted(stateLevelWordsFinal, letterSelect, numberWordBlock));\n      setCounter(0); // уровень пройден, в банку падает монетка\n\n      dispatch(boxCoinsDeposit(boxCoinsLetter, letterSelect, coins[numberWordBlock])); //берем массив флагов прохождения уровней по выбранной букве\n\n      if (stateLevelWordsFinal[letterSelect].every(x => x === true)) {\n        dispatch(finalLetterWords(stateFinalLetterWords, letterSelect));\n        console.log(' УРОВЕНЬ ПРОЙДЕН!!!');\n      }\n    }\n  };\n\n  const hendlerLevelWordsRepeat = () => {\n    setCounter(0); // 1 слово\n    //снимаем флаг прохождения уровня\n\n    dispatch(nullFlagLevelWordCompleted(stateLevelWordsFinal, letterSelect, numberWordBlock));\n  };\n\n  const hendlerFinaleWordsTakePrize = () => {\n    // буква пройдена, при получении приза все флаги буквы меняем на false для возможности повторного прохождения буквы\n    //флаг прохождения буквы возвращаем на false\n    dispatch(takePrizeFlagFinalWordsNull(stateFinalLetterWords, letterSelect)); // флаги прохождения уровней буквы возвращаем на false\n\n    dispatch(takePrizeAllFlagsLevelsWordsNull(stateLevelWordsFinal, letterSelect));\n  };\n\n  useEffect(() => {\n    return () => {\n      dispatch(sourceStateLettersBlocks());\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"automation-buttons-blocks\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\u0422\\u0438\\u043F \\u0431\\u0443\\u043A\\u0432\\u044B \", props.typeLetter, \" \\u0431\\u0443\\u043A\\u0432\\u0430 \", letterSelect, /*#__PURE__*/_jsxDEV(SelectingLevelBlock, {\n        numbersLevelBlock: Object.keys(stateWords[letterSelect]),\n        onclick: hendlerSelectWordBlock,\n        onclickStartAgain: hendlerFinaleWordsTakePrize,\n        levelsComplied: stateLevelWordsFinal[letterSelect],\n        coins: coins\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(LevelBlockWord, {\n      onclickWord: hendlerClickWord,\n      onclickRepeat: hendlerLevelWordsRepeat,\n      data: counter + 1,\n      name: stateWords[letterSelect][numberWordBlock][counter],\n      flagLevelFinal: stateLevelWordsFinal[letterSelect][numberWordBlock],\n      coin: coins[numberWordBlock]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(BoxCoinsLevelCompleted, {\n      boxCoinsLetter: boxCoinsLetter[letterSelect]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), stateFinalLetterWords[letterSelect] === true ? /*#__PURE__*/_jsxDEV(FinaleTakePrize, {\n      onclick: hendlerFinaleWordsTakePrize\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 21\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n}\n\n_s(WordBlocks, \"dRrdeO7RePicbAu8subz2iGt+ZI=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = WordBlocks;\nexport default connect()(WordBlocks);\n\nvar _c;\n\n$RefreshReg$(_c, \"WordBlocks\");","map":{"version":3,"sources":["D:/Обучение/React/projects/logopedist-game/src/containers/WordsAutomation/WordBlocks.js"],"names":["React","useEffect","useState","connect","useDispatch","useSelector","BoxCoinsLevelCompleted","SelectingLevelBlock","LevelBlockWord","sourceStateLettersBlocks","changeFlagLevelWordCompleted","nullFlagLevelWordCompleted","takePrizeAllFlagsLevelsWordsNull","finalLetterWords","takePrizeFlagFinalWordsNull","boxCoinsDeposit","WordBlocks","props","dispatch","letterSelect","state","stateLetters","stateWords","boxCoinsLetter","stateLevelCoins","coins","wordsBlocks","stateLevelWordsFinal","stateFinalLetterWords","numberWordBlock","setNumberWordBlock","counter","setCounter","hendlerSelectWordBlock","data","hendlerClickWord","numberWord","every","x","console","log","hendlerLevelWordsRepeat","hendlerFinaleWordsTakePrize","typeLetter","Object","keys"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,EAAkBC,WAAlB,EAA+BC,WAA/B,QAAkD,aAAlD;AAEA,OAAOC,sBAAP,MAAmC,mDAAnC;AACA,OAAOC,mBAAP,MAAgC,yCAAhC;AACA,OAAOC,cAAP,MAA2B,iDAA3B;AAEA,SACIC,wBADJ,QAEO,gDAFP;AAGA,SACIC,4BADJ,EAEIC,0BAFJ,EAGIC,gCAHJ,QAIO,mDAJP;AAKA,SACIC,gBADJ,EAEIC,2BAFJ,QAGO,oDAHP;AAIA,SACIC,eADJ,QAEO,qCAFP;;AAIA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AAEvB,QAAMC,QAAQ,GAAGd,WAAW,EAA5B;AAEA,QAAMe,YAAY,GAAGd,WAAW,CAACe,KAAK,IAAIA,KAAK,CAACC,YAAN,CAAmBF,YAA7B,CAAhC,CAJuB,CAIqD;;AAC5E,QAAMG,UAAU,GAAGjB,WAAW,CAACe,KAAK,IAAIA,KAAK,CAACE,UAAhB,CAA9B,CALuB,CAKoC;;AAC3D,QAAMC,cAAc,GAAGlB,WAAW,CAACe,KAAK,IAAIA,KAAK,CAACI,eAAN,CAAsBD,cAAhC,CAAlC,CANuB,CAM2D;;AAClF,QAAME,KAAK,GAAGpB,WAAW,CAACe,KAAK,IAAIA,KAAK,CAACI,eAAN,CAAsBE,WAAhC,CAAzB,CAPuB,CAOgD;;AAEvE,QAAMC,oBAAoB,GAAGtB,WAAW,CAACe,KAAK,IAAIA,KAAK,CAACO,oBAAhB,CAAxC,CATuB,CASwD;;AAC/E,QAAMC,qBAAqB,GAAGvB,WAAW,CAACe,KAAK,IAAIA,KAAK,CAACQ,qBAAhB,CAAzC,CAVuB,CAUyD;;AAGhF,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwC5B,QAAQ,CAAC,CAAD,CAAtD,CAbuB,CAaoC;;AAE3D,QAAM,CAAC6B,OAAD,EAAUC,UAAV,IAAwB9B,QAAQ,CAAC,CAAD,CAAtC,CAfuB,CAemB;;AAE1C,QAAM+B,sBAAsB,GAAIC,IAAD,IAAU;AACrCJ,IAAAA,kBAAkB,CAACI,IAAD,CAAlB;AACAF,IAAAA,UAAU,CAAC,CAAD,CAAV;AACH,GAHD;;AAIA,QAAMG,gBAAgB,GAAIC,UAAD,IAAgB;AACrCJ,IAAAA,UAAU,CAACI,UAAD,CAAV;;AACA,QAAIA,UAAU,KAAK,EAAnB,EAAuB;AACnBlB,MAAAA,QAAQ,CAACR,4BAA4B,CAACiB,oBAAD,EAAuBR,YAAvB,EAAqCU,eAArC,CAA7B,CAAR;AACAG,MAAAA,UAAU,CAAC,CAAD,CAAV,CAFmB,CAInB;;AACAd,MAAAA,QAAQ,CAACH,eAAe,CAACQ,cAAD,EAAiBJ,YAAjB,EAA+BM,KAAK,CAACI,eAAD,CAApC,CAAhB,CAAR,CALmB,CAOnB;;AACA,UAAIF,oBAAoB,CAACR,YAAD,CAApB,CAAmCkB,KAAnC,CAAyCC,CAAC,IAAIA,CAAC,KAAK,IAApD,CAAJ,EAA+D;AAC3DpB,QAAAA,QAAQ,CAACL,gBAAgB,CAACe,qBAAD,EAAwBT,YAAxB,CAAjB,CAAR;AACAoB,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACH;AACJ;AACJ,GAfD;;AAgBA,QAAMC,uBAAuB,GAAG,MAAM;AAClCT,IAAAA,UAAU,CAAC,CAAD,CAAV,CADkC,CACnB;AACf;;AACAd,IAAAA,QAAQ,CAACP,0BAA0B,CAACgB,oBAAD,EAAuBR,YAAvB,EAAqCU,eAArC,CAA3B,CAAR;AACH,GAJD;;AAKA,QAAMa,2BAA2B,GAAG,MAAM;AACtC;AAEA;AACAxB,IAAAA,QAAQ,CAACJ,2BAA2B,CAACc,qBAAD,EAAwBT,YAAxB,CAA5B,CAAR,CAJsC,CAMtC;;AACAD,IAAAA,QAAQ,CAACN,gCAAgC,CAACe,oBAAD,EAAuBR,YAAvB,CAAjC,CAAR;AAEH,GATD;;AAWAlB,EAAAA,SAAS,CAAC,MAAM;AACZ,WAAO,MAAM;AACTiB,MAAAA,QAAQ,CAACT,wBAAwB,EAAzB,CAAR;AACH,KAFD;AAGH,GAJQ,EAIN,EAJM,CAAT;AAMA,sBACI;AAAK,IAAA,SAAS,EAAC,2BAAf;AAAA,4BAGI;AAAA,uEACeQ,KAAK,CAAC0B,UADrB,sCACwCxB,YADxC,eAGI,QAAC,mBAAD;AACI,QAAA,iBAAiB,EAAEyB,MAAM,CAACC,IAAP,CAAYvB,UAAU,CAACH,YAAD,CAAtB,CADvB;AAEI,QAAA,OAAO,EAAEc,sBAFb;AAGI,QAAA,iBAAiB,EAAES,2BAHvB;AAII,QAAA,cAAc,EAAEf,oBAAoB,CAACR,YAAD,CAJxC;AAKI,QAAA,KAAK,EAAEM;AALX;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eAeI,QAAC,cAAD;AACI,MAAA,WAAW,EAAEU,gBADjB;AAEI,MAAA,aAAa,EAAEM,uBAFnB;AAGI,MAAA,IAAI,EAAEV,OAAO,GAAG,CAHpB;AAII,MAAA,IAAI,EAAET,UAAU,CAACH,YAAD,CAAV,CAAyBU,eAAzB,EAA0CE,OAA1C,CAJV;AAKI,MAAA,cAAc,EAAEJ,oBAAoB,CAACR,YAAD,CAApB,CAAmCU,eAAnC,CALpB;AAMI,MAAA,IAAI,EAAEJ,KAAK,CAACI,eAAD;AANf;AAAA;AAAA;AAAA;AAAA,YAfJ,eAwBI,QAAC,sBAAD;AACI,MAAA,cAAc,EAAEN,cAAc,CAACJ,YAAD;AADlC;AAAA;AAAA;AAAA;AAAA,YAxBJ,EA4BQS,qBAAqB,CAACT,YAAD,CAArB,KAAwC,IAAxC,gBACI,QAAC,eAAD;AACI,MAAA,OAAO,EAAEuB;AADb;AAAA;AAAA;AAAA;AAAA,YADJ,GAIM,IAhCd;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAuCH;;GAlGQ1B,U;UAEYZ,W,EAEIC,W,EACFA,W,EACIA,W,EACTA,W,EAEeA,W,EACCA,W;;;KAVzBW,U;AAoGT,eAAeb,OAAO,GAAGa,UAAH,CAAtB","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport BoxCoinsLevelCompleted from '../../components/Completed/BoxCoinsLevelCompleted';\r\nimport SelectingLevelBlock from '../../UserInterface/SelectingLevelBlock';\r\nimport LevelBlockWord from '../../components/WordsAutomation/LevelBlockWord';\r\n\r\nimport {\r\n    sourceStateLettersBlocks,\r\n} from '../../store/LettersBlocks/actionsLettersBlocks';\r\nimport {\r\n    changeFlagLevelWordCompleted,\r\n    nullFlagLevelWordCompleted,\r\n    takePrizeAllFlagsLevelsWordsNull\r\n} from '../../store/LevelCompleted/actionsLevelWordsFinal';\r\nimport {\r\n    finalLetterWords,\r\n    takePrizeFlagFinalWordsNull\r\n} from '../../store/LevelCompleted/actionsFinalLetterWords';\r\nimport {\r\n    boxCoinsDeposit\r\n} from '../../store/Coins/actionsLevelCoins';\r\n\r\nfunction WordBlocks(props) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const letterSelect = useSelector(state => state.stateLetters.letterSelect); //выбрана буква\r\n    const stateWords = useSelector(state => state.stateWords); //массивы слов для вывода в уровни\r\n    const boxCoinsLetter = useSelector(state => state.stateLevelCoins.boxCoinsLetter) // банка с наградами\r\n    const coins = useSelector(state => state.stateLevelCoins.wordsBlocks); // массив со значками наград\r\n\r\n    const stateLevelWordsFinal = useSelector(state => state.stateLevelWordsFinal); //флаги прохождения уровней в букве\r\n    const stateFinalLetterWords = useSelector(state => state.stateFinalLetterWords);// флаги прохождения буквы\r\n\r\n\r\n    const [numberWordBlock, setNumberWordBlock] = useState(0); // номер уровня\r\n    \r\n    const [counter, setCounter] = useState(0);//счетчик переключиния слов, в массиве 10 слов\r\n\r\n    const hendlerSelectWordBlock = (data) => {\r\n        setNumberWordBlock(data);\r\n        setCounter(0);\r\n    };\r\n    const hendlerClickWord = (numberWord) => {\r\n        setCounter(numberWord);\r\n        if (numberWord === 10) {\r\n            dispatch(changeFlagLevelWordCompleted(stateLevelWordsFinal, letterSelect, numberWordBlock));\r\n            setCounter(0);\r\n\r\n            // уровень пройден, в банку падает монетка\r\n            dispatch(boxCoinsDeposit(boxCoinsLetter, letterSelect, coins[numberWordBlock]));\r\n\r\n            //берем массив флагов прохождения уровней по выбранной букве\r\n            if (stateLevelWordsFinal[letterSelect].every(x => x === true)) {\r\n                dispatch(finalLetterWords(stateFinalLetterWords, letterSelect));\r\n                console.log(' УРОВЕНЬ ПРОЙДЕН!!!')\r\n            }\r\n        }\r\n    };\r\n    const hendlerLevelWordsRepeat = () => {\r\n        setCounter(0); // 1 слово\r\n        //снимаем флаг прохождения уровня\r\n        dispatch(nullFlagLevelWordCompleted(stateLevelWordsFinal, letterSelect, numberWordBlock));\r\n    };\r\n    const hendlerFinaleWordsTakePrize = () => {\r\n        // буква пройдена, при получении приза все флаги буквы меняем на false для возможности повторного прохождения буквы\r\n\r\n        //флаг прохождения буквы возвращаем на false\r\n        dispatch(takePrizeFlagFinalWordsNull(stateFinalLetterWords, letterSelect));\r\n\r\n        // флаги прохождения уровней буквы возвращаем на false\r\n        dispatch(takePrizeAllFlagsLevelsWordsNull(stateLevelWordsFinal, letterSelect));\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(sourceStateLettersBlocks());\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"automation-buttons-blocks\">\r\n\r\n\r\n            <div>\r\n                Тип буквы {props.typeLetter} буква {letterSelect}\r\n\r\n                <SelectingLevelBlock\r\n                    numbersLevelBlock={Object.keys(stateWords[letterSelect])}\r\n                    onclick={hendlerSelectWordBlock}\r\n                    onclickStartAgain={hendlerFinaleWordsTakePrize}\r\n                    levelsComplied={stateLevelWordsFinal[letterSelect]}\r\n                    coins={coins}\r\n                />\r\n            </div>\r\n\r\n            <LevelBlockWord\r\n                onclickWord={hendlerClickWord}\r\n                onclickRepeat={hendlerLevelWordsRepeat}\r\n                data={counter + 1}\r\n                name={stateWords[letterSelect][numberWordBlock][counter]}\r\n                flagLevelFinal={stateLevelWordsFinal[letterSelect][numberWordBlock]}\r\n                coin={coins[numberWordBlock]}\r\n            />\r\n\r\n            <BoxCoinsLevelCompleted\r\n                boxCoinsLetter={boxCoinsLetter[letterSelect]}\r\n            />\r\n            {\r\n                stateFinalLetterWords[letterSelect] === true ?\r\n                    <FinaleTakePrize\r\n                        onclick={hendlerFinaleWordsTakePrize}\r\n                    />\r\n                    : null\r\n            }\r\n               \r\n        </div>\r\n        \r\n     )\r\n}\r\n\r\nexport default connect()(WordBlocks)\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}