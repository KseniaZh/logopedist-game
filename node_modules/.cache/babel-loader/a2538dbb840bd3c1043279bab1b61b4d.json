{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\logopedist-game\\\\src\\\\components\\\\Automation\\\\AutomationBlocks.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport FlagsLevelsСompleted from '../../containers/Automation/FlagsLevelsСompleted';\nimport SelectingLevelBlock from '../../UserInterface/SelectingLevelBlock';\nimport LevelBlock from '../../components/Automation/LevelBlock';\nimport { sourceStateLettersBlocks } from '../../store/LettersBlocks/actionsLettersBlocks';\nimport { changeFlagButtonClick } from '../../store/LevelCompleted/actionsLevelCompl';\nimport { changeFlagButtonBlockCompleted } from '../../store/LevelCompleted/actionsLevelFinal';\n\nfunction AutomationBlocks(props) {\n  _s();\n\n  const dispatch = useDispatch();\n  const letterSelect = useSelector(state => state.stateLetters.letterSelect);\n  const namesLevelBlock = useSelector(state => state.stateLevelCoins.letterBlocks);\n  const levelsComplied = useSelector(state => state.stateLevelFinal[letterSelect]);\n  const stateLevelCompleted = useSelector(state => state.stateLevelCompleted);\n  const stateLevelFinal = useSelector(state => state.stateLevelFinal);\n\n  const levelSelect = data => {\n    for (let i = 0; i < data.length; i++) {\n      if (data[i] === false) {\n        return i;\n      }\n\n      ;\n    }\n\n    ;\n  };\n\n  const [numberLevelBlock, setNumberLevelBlock] = useState(levelSelect(levelsComplied));\n  const coin = useSelector(state => state.stateLevelCoins.letterBlocks[numberLevelBlock]);\n  const stateLetters = useSelector(state => state.stateLettersBlocks[numberLevelBlock]);\n\n  const hendlerSelectLevelBlock = data => {\n    setNumberLevelBlock(data);\n  };\n\n  const hendlerButtonClick = (numberButton, numberButtonBlock) => {\n    dispatch(changeFlagButtonClick(stateLevelCompleted, letterSelect, numberLevelBlock, numberButtonBlock, numberButton)); //получаем массив значений флагов из выбранного ButtonBlocks\n\n    let arrFlags = Object.values(stateLevelCompleted[letterSelect][numberLevelBlock][numberButtonBlock]); // если все флаги чекнуты\n\n    if (arrFlags.every(x => x === true) === true) {\n      dispatch(changeFlagButtonBlockCompleted(stateLevelFinal, letterSelect, numberLevelBlock));\n    }\n\n    ;\n  };\n\n  useEffect(() => {\n    return () => {\n      dispatch(sourceStateLettersBlocks());\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"automation-buttons-blocks\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\u0422\\u0438\\u043F \\u0431\\u0443\\u043A\\u0432\\u044B \", props.typeLetter, \" \\u0431\\u0443\\u043A\\u0432\\u0430 \", letterSelect, /*#__PURE__*/_jsxDEV(SelectingLevelBlock, {\n        namesLevelBlock: namesLevelBlock,\n        onclick: hendlerSelectLevelBlock,\n        levelsComplied: levelsComplied\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(LevelBlock, {\n      numberLevelBlock: numberLevelBlock,\n      namesLevelBlock: namesLevelBlock,\n      coin: coin,\n      stateLetters: stateLetters,\n      onclick: hendlerButtonClick,\n      letterBlockFlags: stateLevelCompleted[letterSelect][numberLevelBlock]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FlagsLevelsСompleted, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AutomationBlocks, \"KdGZdhCcAqlCqWIWIXQzP0UdVXU=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = AutomationBlocks;\nexport default connect()(AutomationBlocks);\n\nvar _c;\n\n$RefreshReg$(_c, \"AutomationBlocks\");","map":{"version":3,"sources":["D:/Обучение/React/projects/logopedist-game/src/components/Automation/AutomationBlocks.js"],"names":["React","useEffect","useState","connect","useDispatch","useSelector","FlagsLevelsСompleted","SelectingLevelBlock","LevelBlock","sourceStateLettersBlocks","changeFlagButtonClick","changeFlagButtonBlockCompleted","AutomationBlocks","props","dispatch","letterSelect","state","stateLetters","namesLevelBlock","stateLevelCoins","letterBlocks","levelsComplied","stateLevelFinal","stateLevelCompleted","levelSelect","data","i","length","numberLevelBlock","setNumberLevelBlock","coin","stateLettersBlocks","hendlerSelectLevelBlock","hendlerButtonClick","numberButton","numberButtonBlock","arrFlags","Object","values","every","x","typeLetter"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport FlagsLevelsСompleted from '../../containers/Automation/FlagsLevelsСompleted';\r\nimport SelectingLevelBlock from '../../UserInterface/SelectingLevelBlock';\r\nimport LevelBlock from '../../components/Automation/LevelBlock';\r\n\r\nimport {\r\n    sourceStateLettersBlocks,\r\n} from '../../store/LettersBlocks/actionsLettersBlocks';\r\nimport {\r\n    changeFlagButtonClick\r\n} from '../../store/LevelCompleted/actionsLevelCompl';\r\nimport {\r\n    changeFlagButtonBlockCompleted\r\n} from '../../store/LevelCompleted/actionsLevelFinal';\r\n\r\nfunction AutomationBlocks(props) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const letterSelect = useSelector(state => state.stateLetters.letterSelect);\r\n    const namesLevelBlock = useSelector(state => state.stateLevelCoins.letterBlocks);\r\n    const levelsComplied = useSelector(state => state.stateLevelFinal[letterSelect]);\r\n    const stateLevelCompleted = useSelector(state => state.stateLevelCompleted);\r\n    const stateLevelFinal = useSelector(state => state.stateLevelFinal);\r\n\r\n    const levelSelect = (data) => {\r\n        for (let i = 0; i < data.length; i++) {\r\n            if (data[i] === false) {\r\n                return i\r\n            };\r\n        };\r\n    };\r\n\r\n    const [numberLevelBlock, setNumberLevelBlock] = useState(levelSelect(levelsComplied));\r\n\r\n    const coin = useSelector(state => state.stateLevelCoins.letterBlocks[numberLevelBlock]);\r\n    const stateLetters = useSelector(state => state.stateLettersBlocks[numberLevelBlock]);\r\n\r\n    const hendlerSelectLevelBlock = (data) => {\r\n        setNumberLevelBlock(data);\r\n    }\r\n\r\n\r\n\r\n    const hendlerButtonClick = (numberButton, numberButtonBlock) => {\r\n\r\n        dispatch(changeFlagButtonClick(stateLevelCompleted, letterSelect, numberLevelBlock, numberButtonBlock, numberButton));\r\n        //получаем массив значений флагов из выбранного ButtonBlocks\r\n        let arrFlags = Object.values(stateLevelCompleted[letterSelect][numberLevelBlock][numberButtonBlock]);\r\n        // если все флаги чекнуты\r\n        if (arrFlags.every(x => x === true) === true) {\r\n            dispatch(changeFlagButtonBlockCompleted(stateLevelFinal, letterSelect, numberLevelBlock));\r\n        };\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(sourceStateLettersBlocks());\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"automation-buttons-blocks\">\r\n\r\n            <div>\r\n                Тип буквы {props.typeLetter} буква {letterSelect}\r\n\r\n                <SelectingLevelBlock\r\n                    namesLevelBlock={namesLevelBlock}\r\n                    onclick={hendlerSelectLevelBlock}\r\n                    levelsComplied={levelsComplied}\r\n                />\r\n            </div>\r\n\r\n            <LevelBlock\r\n                numberLevelBlock={numberLevelBlock}\r\n                namesLevelBlock={namesLevelBlock}\r\n                coin={coin}\r\n                stateLetters={stateLetters}\r\n                onclick={hendlerButtonClick}\r\n                letterBlockFlags={stateLevelCompleted[letterSelect][numberLevelBlock]}\r\n            />\r\n\r\n            <FlagsLevelsСompleted />\r\n               \r\n        </div>\r\n        \r\n     )\r\n}\r\n\r\nexport default connect()(AutomationBlocks)\r\n"]},"metadata":{},"sourceType":"module"}