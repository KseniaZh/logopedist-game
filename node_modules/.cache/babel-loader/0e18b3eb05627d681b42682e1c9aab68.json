{"ast":null,"code":"import { FLAG_FINAL_LETTER_WORDS, TAKE_PRIZE_FLAG_LETTER_WORDS_NULL, BEGIN_AGAIN_ALL_LETTERS_WORDS_NULL, LOAD_FROM_LOCAL_STORAGE_FINAL_LETTER_WORDS } from \"./types\";\nexport const finalLetterWords = (stateFinalLetterWords, letter) => {\n  //все уровни пройдены, флаг true\n  let obj = { ...stateFinalLetterWords\n  };\n  obj[letter] = true;\n  localStorage[`${JSON.parse(localStorage['player'])}_finalLetterWords`] = JSON.stringify(obj);\n  return {\n    type: FLAG_FINAL_LETTER_WORDS,\n    payload: obj\n  };\n};\nexport const takePrizeFlagFinalWordsNull = (stateFinalLetterWords, letter) => {\n  //буква пройдена, игрок получает приз\n  // для возможности повторного прохождения буквы возвращаемся к исходному обнулению\n  // флаг меняем на false\n  let obj = { ...stateFinalLetterWords\n  };\n  obj[letter] = false;\n  localStorage[`${JSON.parse(localStorage['player'])}_finalLetterWords`] = JSON.stringify(obj);\n  return {\n    type: TAKE_PRIZE_FLAG_LETTER_WORDS_NULL,\n    payload: obj\n  };\n};\nexport const beginAgainAllFlagsFinalLetterWordsNull = () => {\n  //сброс всех уровней. Все, кроме наград, возвращается к исходному состоянию\n  let obj = {\n    \"Б\": false,\n    \"В\": false,\n    \"Г\": false,\n    \"Д\": false,\n    \"Ж\": false,\n    \"З\": false,\n    \"К\": false,\n    \"Л\": false,\n    \"М\": false,\n    \"Н\": false,\n    \"П\": false,\n    \"Р\": false,\n    \"С\": false,\n    \"Т\": false,\n    \"Ф\": false,\n    \"Ц\": false,\n    \"Ч\": false,\n    \"Ш\": false,\n    \"Щ\": false\n  };\n  localStorage[`${JSON.parse(localStorage['player'])}_finalLetterWords`] = JSON.stringify(obj);\n  return {\n    type: BEGIN_AGAIN_ALL_LETTERS_WORDS_NULL,\n    payload: obj\n  };\n};\nexport const loadLocalStorageFinalLetterWords = data => {\n  //при входе в игру загружаем из localStorage \n  return {\n    type: LOAD_FROM_LOCAL_STORAGE_FINAL_LETTER_WORDS,\n    payload: data\n  };\n};","map":{"version":3,"sources":["D:/Обучение/React/projects/logopedist-game/src/store/LevelCompleted/actionsFinalLetterWords.js"],"names":["FLAG_FINAL_LETTER_WORDS","TAKE_PRIZE_FLAG_LETTER_WORDS_NULL","BEGIN_AGAIN_ALL_LETTERS_WORDS_NULL","LOAD_FROM_LOCAL_STORAGE_FINAL_LETTER_WORDS","finalLetterWords","stateFinalLetterWords","letter","obj","localStorage","JSON","parse","stringify","type","payload","takePrizeFlagFinalWordsNull","beginAgainAllFlagsFinalLetterWordsNull","loadLocalStorageFinalLetterWords","data"],"mappings":"AAAA,SACIA,uBADJ,EAEIC,iCAFJ,EAGIC,kCAHJ,EAIIC,0CAJJ,QAMO,SANP;AAQA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,qBAAD,EAAwBC,MAAxB,KAAmC;AAC/D;AAEA,MAAIC,GAAG,GAAG,EAAE,GAAGF;AAAL,GAAV;AAEAE,EAAAA,GAAG,CAACD,MAAD,CAAH,GAAc,IAAd;AAEAE,EAAAA,YAAY,CAAE,GAAEC,IAAI,CAACC,KAAL,CAAWF,YAAY,CAAC,QAAD,CAAvB,CAAmC,mBAAvC,CAAZ,GAAyEC,IAAI,CAACE,SAAL,CAAeJ,GAAf,CAAzE;AAEA,SAAO;AACHK,IAAAA,IAAI,EAAEZ,uBADH;AAEHa,IAAAA,OAAO,EAAEN;AAFN,GAAP;AAIH,CAbM;AAcP,OAAO,MAAMO,2BAA2B,GAAG,CAACT,qBAAD,EAAwBC,MAAxB,KAAmC;AAC1E;AACA;AACA;AAEA,MAAIC,GAAG,GAAG,EAAE,GAAGF;AAAL,GAAV;AAEAE,EAAAA,GAAG,CAACD,MAAD,CAAH,GAAc,KAAd;AAEAE,EAAAA,YAAY,CAAE,GAAEC,IAAI,CAACC,KAAL,CAAWF,YAAY,CAAC,QAAD,CAAvB,CAAmC,mBAAvC,CAAZ,GAAyEC,IAAI,CAACE,SAAL,CAAeJ,GAAf,CAAzE;AAEA,SAAO;AACHK,IAAAA,IAAI,EAAEX,iCADH;AAEHY,IAAAA,OAAO,EAAEN;AAFN,GAAP;AAIH,CAfM;AAiBP,OAAO,MAAMQ,sCAAsC,GAAG,MAAM;AACpD;AAGJ,MAAIR,GAAG,GAAG;AACN,SAAK,KADC;AAEN,SAAK,KAFC;AAGN,SAAK,KAHC;AAIN,SAAK,KAJC;AAKN,SAAK,KALC;AAMN,SAAK,KANC;AAON,SAAK,KAPC;AAQN,SAAK,KARC;AASN,SAAK,KATC;AAUN,SAAK,KAVC;AAWN,SAAK,KAXC;AAYN,SAAK,KAZC;AAaN,SAAK,KAbC;AAcN,SAAK,KAdC;AAeN,SAAK,KAfC;AAgBN,SAAK,KAhBC;AAiBN,SAAK,KAjBC;AAkBN,SAAK,KAlBC;AAmBN,SAAK;AAnBC,GAAV;AAsBAC,EAAAA,YAAY,CAAE,GAAEC,IAAI,CAACC,KAAL,CAAWF,YAAY,CAAC,QAAD,CAAvB,CAAmC,mBAAvC,CAAZ,GAAyEC,IAAI,CAACE,SAAL,CAAeJ,GAAf,CAAzE;AAEA,SAAO;AACHK,IAAAA,IAAI,EAAEV,kCADH;AAEHW,IAAAA,OAAO,EAAEN;AAFN,GAAP;AAIH,CAhCM;AAkCP,OAAO,MAAMS,gCAAgC,GAAIC,IAAD,IAAU;AACtD;AAEA,SAAO;AACHL,IAAAA,IAAI,EAAET,0CADH;AAEHU,IAAAA,OAAO,EAAEI;AAFN,GAAP;AAIH,CAPM","sourcesContent":["import {\r\n    FLAG_FINAL_LETTER_WORDS,\r\n    TAKE_PRIZE_FLAG_LETTER_WORDS_NULL,\r\n    BEGIN_AGAIN_ALL_LETTERS_WORDS_NULL,\r\n    LOAD_FROM_LOCAL_STORAGE_FINAL_LETTER_WORDS\r\n\r\n} from \"./types\";\r\n\r\nexport const finalLetterWords = (stateFinalLetterWords, letter) => {\r\n    //все уровни пройдены, флаг true\r\n\r\n    let obj = { ...stateFinalLetterWords };\r\n\r\n    obj[letter] = true;\r\n\r\n    localStorage[`${JSON.parse(localStorage['player'])}_finalLetterWords`] = JSON.stringify(obj);\r\n\r\n    return {\r\n        type: FLAG_FINAL_LETTER_WORDS,\r\n        payload: obj\r\n    }\r\n}\r\nexport const takePrizeFlagFinalWordsNull = (stateFinalLetterWords, letter) => {\r\n    //буква пройдена, игрок получает приз\r\n    // для возможности повторного прохождения буквы возвращаемся к исходному обнулению\r\n    // флаг меняем на false\r\n\r\n    let obj = { ...stateFinalLetterWords };\r\n\r\n    obj[letter] = false;\r\n\r\n    localStorage[`${JSON.parse(localStorage['player'])}_finalLetterWords`] = JSON.stringify(obj);\r\n\r\n    return {\r\n        type: TAKE_PRIZE_FLAG_LETTER_WORDS_NULL,\r\n        payload: obj\r\n    }\r\n}\r\n\r\nexport const beginAgainAllFlagsFinalLetterWordsNull = () => {\r\n        //сброс всех уровней. Все, кроме наград, возвращается к исходному состоянию\r\n\r\n\r\n    let obj = {\r\n        \"Б\": false,\r\n        \"В\": false,\r\n        \"Г\": false,\r\n        \"Д\": false,\r\n        \"Ж\": false,\r\n        \"З\": false,\r\n        \"К\": false,\r\n        \"Л\": false,\r\n        \"М\": false,\r\n        \"Н\": false,\r\n        \"П\": false,\r\n        \"Р\": false,\r\n        \"С\": false,\r\n        \"Т\": false,\r\n        \"Ф\": false,\r\n        \"Ц\": false,\r\n        \"Ч\": false,\r\n        \"Ш\": false,\r\n        \"Щ\": false,\r\n    };\r\n\r\n    localStorage[`${JSON.parse(localStorage['player'])}_finalLetterWords`] = JSON.stringify(obj);\r\n\r\n    return {\r\n        type: BEGIN_AGAIN_ALL_LETTERS_WORDS_NULL,\r\n        payload: obj\r\n    }\r\n}\r\n\r\nexport const loadLocalStorageFinalLetterWords = (data) => {\r\n    //при входе в игру загружаем из localStorage \r\n\r\n    return {\r\n        type: LOAD_FROM_LOCAL_STORAGE_FINAL_LETTER_WORDS,\r\n        payload: data\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}