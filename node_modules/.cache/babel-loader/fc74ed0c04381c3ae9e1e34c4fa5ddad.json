{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\logopedist-game\\\\src\\\\components\\\\WordsAutomation\\\\WordBlocks.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport FlagsLevelsСompleted from '../../containers/Automation/FlagsLevelsСompleted';\nimport SelectingLevelBlock from '../../UserInterface/SelectingLevelBlock';\nimport LevelBlockWord from '../../components/WordsAutomation/LevelBlockWord';\nimport { sourceStateLettersBlocks } from '../../store/LettersBlocks/actionsLettersBlocks';\nimport { changeFlagButtonClick } from '../../store/LevelCompleted/actionsLevelCompl';\nimport { changeFlagButtonBlockCompleted } from '../../store/LevelCompleted/actionsButtonBlockFinal';\nimport { changeFlagLevelCompleted } from '../../store/LevelCompleted/actionsLevelFinal';\nimport { finalLetter } from '../../store/LevelCompleted/actionsFinalLetter';\nimport { flagLevelLetterEnd } from '../../store/Coins/actionsLetterEnd';\n\nfunction WordBlocks(props) {\n  _s();\n\n  const dispatch = useDispatch();\n  const letterSelect = useSelector(state => state.stateLetters.letterSelect);\n  const namesLevelBlock = useSelector(state => state.stateLevelCoins.letterBlocks);\n  const stateLevelCompleted = useSelector(state => state.stateLevelCompleted); //флаги всех кнопок ButtonBlocks\n\n  const stateLevelFinal = useSelector(state => state.stateLevelFinal); //флаги пройденных блоков в листе\n\n  const stateButtonBlockFinal = useSelector(state => state.stateButtonBlockFinal); //флаги пройденных\n\n  const stateFinalLetter = useSelector(state => state.stateFinalLetter); //BUTTON_LEVEL_COMPLETED\n\n  const stateLevelEnd = useSelector(state => state.stateLevelEnd); //флаги не полученных наград за окончание уровня\n\n  const stateWords = useSelector(state => state.stateWords);\n  const [numberWordBlock, setNumberWordBlock] = useState(0);\n  const coin = useSelector(state => state.stateLevelCoins.letterBlocks[numberWordBlock]);\n  const stateLetters = useSelector(state => state.stateLettersBlocks[numberWordBlock]);\n\n  const hendlerSelectWordBlock = data => {\n    setNumberWordBlock(data);\n  }; //счетчик переключиния слов, в массиве 10 слов\n\n\n  const [counter, setCounter] = useState(0);\n\n  const hendlerClickWord = numberWord => {\n    setCounter(numberWord);\n  };\n\n  const hendlerNextLevel = () => {};\n\n  useEffect(() => {\n    return () => {\n      dispatch(sourceStateLettersBlocks());\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"automation-buttons-blocks\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\u0422\\u0438\\u043F \\u0431\\u0443\\u043A\\u0432\\u044B \", props.typeLetter, \" \\u0431\\u0443\\u043A\\u0432\\u0430 \", letterSelect, /*#__PURE__*/_jsxDEV(SelectingLevelBlock, {\n        namesLevelBlock: namesLevelBlock,\n        onclick: hendlerSelectWordBlock,\n        levelsComplied: stateLevelFinal[letterSelect]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(LevelBlockWord, {\n      onclickWord: hendlerClickWord,\n      onclickNextLevel: hendlerNextLevel,\n      data: counter + 1,\n      name: stateWords[letterSelect][numberWordBlock][counter]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FlagsLevelsСompleted, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}\n\n_s(WordBlocks, \"KNh9DOC4ByofWH9QBSxKkeGUP/k=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = WordBlocks;\nexport default connect()(WordBlocks); //{\n//    stateLevelEnd['letter'][letterSelect] ?\n//        <div>ГОТОВО</div>\n//        : <div>ИСПЫТАНИЕ</div>\n//}\n\nvar _c;\n\n$RefreshReg$(_c, \"WordBlocks\");","map":{"version":3,"sources":["D:/Обучение/React/projects/logopedist-game/src/components/WordsAutomation/WordBlocks.js"],"names":["React","useEffect","useState","connect","useDispatch","useSelector","FlagsLevelsСompleted","SelectingLevelBlock","LevelBlockWord","sourceStateLettersBlocks","changeFlagButtonClick","changeFlagButtonBlockCompleted","changeFlagLevelCompleted","finalLetter","flagLevelLetterEnd","WordBlocks","props","dispatch","letterSelect","state","stateLetters","namesLevelBlock","stateLevelCoins","letterBlocks","stateLevelCompleted","stateLevelFinal","stateButtonBlockFinal","stateFinalLetter","stateLevelEnd","stateWords","numberWordBlock","setNumberWordBlock","coin","stateLettersBlocks","hendlerSelectWordBlock","data","counter","setCounter","hendlerClickWord","numberWord","hendlerNextLevel","typeLetter"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport FlagsLevelsСompleted from '../../containers/Automation/FlagsLevelsСompleted';\r\nimport SelectingLevelBlock from '../../UserInterface/SelectingLevelBlock';\r\nimport LevelBlockWord from '../../components/WordsAutomation/LevelBlockWord';\r\n\r\nimport {\r\n    sourceStateLettersBlocks,\r\n} from '../../store/LettersBlocks/actionsLettersBlocks';\r\nimport {\r\n    changeFlagButtonClick\r\n} from '../../store/LevelCompleted/actionsLevelCompl'; \r\nimport {\r\n    changeFlagButtonBlockCompleted\r\n} from '../../store/LevelCompleted/actionsButtonBlockFinal';\r\nimport {\r\n    changeFlagLevelCompleted\r\n} from '../../store/LevelCompleted/actionsLevelFinal';\r\nimport {\r\n    finalLetter\r\n} from '../../store/LevelCompleted/actionsFinalLetter';\r\nimport {\r\n    flagLevelLetterEnd\r\n} from '../../store/Coins/actionsLetterEnd';\r\n\r\nfunction WordBlocks(props) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const letterSelect = useSelector(state => state.stateLetters.letterSelect);\r\n    const namesLevelBlock = useSelector(state => state.stateLevelCoins.letterBlocks);\r\n    const stateLevelCompleted = useSelector(state => state.stateLevelCompleted);//флаги всех кнопок ButtonBlocks\r\n    const stateLevelFinal = useSelector(state => state.stateLevelFinal); //флаги пройденных блоков в листе\r\n    const stateButtonBlockFinal = useSelector(state => state.stateButtonBlockFinal);//флаги пройденных\r\n    const stateFinalLetter = useSelector(state => state.stateFinalLetter); //BUTTON_LEVEL_COMPLETED\r\n    const stateLevelEnd = useSelector(state => state.stateLevelEnd); //флаги не полученных наград за окончание уровня\r\n    const stateWords = useSelector(state => state.stateWords);\r\n    const [numberWordBlock, setNumberWordBlock] = useState(0);\r\n\r\n    const coin = useSelector(state => state.stateLevelCoins.letterBlocks[numberWordBlock]);\r\n    const stateLetters = useSelector(state => state.stateLettersBlocks[numberWordBlock]);\r\n\r\n    const hendlerSelectWordBlock = (data) => {\r\n        setNumberWordBlock(data);\r\n    }\r\n\r\n    //счетчик переключиния слов, в массиве 10 слов\r\n    const [counter, setCounter] = useState(0);\r\n    const hendlerClickWord = (numberWord) => {\r\n        setCounter(numberWord);\r\n    }\r\n    const hendlerNextLevel = () => {\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(sourceStateLettersBlocks());\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"automation-buttons-blocks\">\r\n\r\n\r\n            <div>\r\n                Тип буквы {props.typeLetter} буква {letterSelect}\r\n\r\n                <SelectingLevelBlock\r\n                    namesLevelBlock={namesLevelBlock}\r\n                    onclick={hendlerSelectWordBlock}\r\n                    levelsComplied={stateLevelFinal[letterSelect]}\r\n                />\r\n            </div>\r\n\r\n            <LevelBlockWord\r\n                onclickWord={hendlerClickWord}\r\n                onclickNextLevel={hendlerNextLevel}\r\n                data={counter + 1}\r\n                name={stateWords[letterSelect][numberWordBlock][counter]}\r\n\r\n            />\r\n\r\n            <FlagsLevelsСompleted />\r\n               \r\n        </div>\r\n        \r\n     )\r\n}\r\n\r\nexport default connect()(WordBlocks)\r\n\r\n\r\n//{\r\n//    stateLevelEnd['letter'][letterSelect] ?\r\n//        <div>ГОТОВО</div>\r\n//        : <div>ИСПЫТАНИЕ</div>\r\n//}\r\n"]},"metadata":{},"sourceType":"module"}