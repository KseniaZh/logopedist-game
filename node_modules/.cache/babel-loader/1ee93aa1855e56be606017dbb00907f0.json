{"ast":null,"code":"import { CHANGE_LETTERS_BLOCKS, SOURCE_STATE_LETTERS_BLOCKS } from \"./types\";\nexport const changeLettersBlocks = (data, letter) => {\n  //изменения блоков слогов после выбора рабочей буквы\n  let stateLettersBlocks = data; // меняем переменную 'X' в state на переданную через props.letterAutomation букву\n\n  for (let k = 0; k < stateLettersBlocks.length; k++) {\n    for (let i = 0; i < stateLettersBlocks[k].length; i++) {\n      let arr = Object.values(stateLettersBlocks[k][i]);\n\n      for (let obj of arr) {\n        let keys = Object.keys(obj);\n\n        for (let key of keys) {\n          if (obj[key] === 'X') {\n            obj[key] = letter;\n          }\n\n          ;\n        }\n\n        ;\n      }\n\n      ;\n    }\n\n    ;\n  }\n\n  return {\n    type: CHANGE_LETTERS_BLOCKS,\n    payload: stateLettersBlocks\n  };\n};\nexport const sourceStateLettersBlocks = () => {\n  //возвращение блоков слогов к исходному нулевому состоянию\n  console.log('блоков слогов к исходному нулевому');\n  return {\n    type: SOURCE_STATE_LETTERS_BLOCKS,\n    payload: stateLettersBlocks\n  };\n};","map":{"version":3,"sources":["D:/Обучение/React/projects/logopedist-game/src/store/LettersBlocks/actionsLettersBlocks.js"],"names":["CHANGE_LETTERS_BLOCKS","SOURCE_STATE_LETTERS_BLOCKS","changeLettersBlocks","data","letter","stateLettersBlocks","k","length","i","arr","Object","values","obj","keys","key","type","payload","sourceStateLettersBlocks","console","log"],"mappings":"AAAA,SACIA,qBADJ,EAEIC,2BAFJ,QAIO,SAJP;AAMA,OAAO,MAAMC,mBAAmB,GAAG,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACjD;AAEA,MAAIC,kBAAkB,GAAGF,IAAzB,CAHiD,CAIjD;;AAEA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,kBAAkB,CAACE,MAAvC,EAA+CD,CAAC,EAAhD,EAAoD;AAChD,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,kBAAkB,CAACC,CAAD,CAAlB,CAAsBC,MAA1C,EAAkDC,CAAC,EAAnD,EAAuD;AAE/C,UAAIC,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAcN,kBAAkB,CAACC,CAAD,CAAlB,CAAsBE,CAAtB,CAAd,CAAV;;AAEA,WAAK,IAAII,GAAT,IAAgBH,GAAhB,EAAqB;AAEjB,YAAII,IAAI,GAAGH,MAAM,CAACG,IAAP,CAAYD,GAAZ,CAAX;;AAEA,aAAK,IAAIE,GAAT,IAAgBD,IAAhB,EAAsB;AAClB,cAAID,GAAG,CAACE,GAAD,CAAH,KAAa,GAAjB,EAAsB;AAClBF,YAAAA,GAAG,CAACE,GAAD,CAAH,GAAWV,MAAX;AACH;;AAAA;AACJ;;AAAA;AACJ;;AAAA;AACJ;;AAAA;AACR;;AAID,SAAO;AACHW,IAAAA,IAAI,EAAEf,qBADH;AAEHgB,IAAAA,OAAO,EAAEX;AAFN,GAAP;AAIH,CA9BM;AAgCP,OAAO,MAAMY,wBAAwB,GAAG,MAAM;AAC1C;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AAEA,SAAO;AACHJ,IAAAA,IAAI,EAAEd,2BADH;AAEHe,IAAAA,OAAO,EAAEX;AAFN,GAAP;AAIH,CATM","sourcesContent":["import {\r\n    CHANGE_LETTERS_BLOCKS,\r\n    SOURCE_STATE_LETTERS_BLOCKS\r\n\r\n} from \"./types\";\r\n\r\nexport const changeLettersBlocks = (data, letter) => {\r\n    //изменения блоков слогов после выбора рабочей буквы\r\n\r\n    let stateLettersBlocks = data;\r\n    // меняем переменную 'X' в state на переданную через props.letterAutomation букву\r\n    \r\n    for (let k = 0; k < stateLettersBlocks.length; k++) {\r\n        for (let i = 0; i < stateLettersBlocks[k].length; i++) {\r\n\r\n                let arr = Object.values(stateLettersBlocks[k][i]);\r\n\r\n                for (let obj of arr) {\r\n\r\n                    let keys = Object.keys(obj);\r\n\r\n                    for (let key of keys) {\r\n                        if (obj[key] === 'X') {\r\n                            obj[key] = letter;\r\n                        };\r\n                    };\r\n                };\r\n            };\r\n    }\r\n    \r\n\r\n\r\n    return {\r\n        type: CHANGE_LETTERS_BLOCKS,\r\n        payload: stateLettersBlocks\r\n    }\r\n}\r\n\r\nexport const sourceStateLettersBlocks = () => {\r\n    //возвращение блоков слогов к исходному нулевому состоянию\r\n\r\n    console.log('блоков слогов к исходному нулевому')\r\n\r\n    return {\r\n        type: SOURCE_STATE_LETTERS_BLOCKS,\r\n        payload: stateLettersBlocks\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}