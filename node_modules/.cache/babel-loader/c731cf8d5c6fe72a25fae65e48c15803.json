{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\logopedist-game\\\\src\\\\components\\\\Automation\\\\AutomationBlocks.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport BoxCoinsLevelCompleted from '../../components/Shop/BoxCoinsLevelCompleted';\nimport SelectingLevelBlock from '../../UserInterface/SelectingLevelBlock';\nimport LevelBlock from '../../components/Automation/LevelBlock';\nimport { sourceStateLettersBlocks } from '../../store/LettersBlocks/actionsLettersBlocks';\nimport { changeFlagButtonClick } from '../../store/LevelCompleted/actionsLevelCompl';\nimport { changeFlagButtonBlockCompleted } from '../../store/LevelCompleted/actionsButtonBlockFinal';\nimport { changeFlagLevelCompleted } from '../../store/LevelCompleted/actionsLevelFinal';\nimport { finalLetter } from '../../store/LevelCompleted/actionsFinalLetter';\nimport { flagLevelLetterEnd } from '../../store/Coins/actionsLetterEnd';\nimport { boxCoinsDeposit } from '../../store/Coins/actionsLevelCoins';\n\nfunction AutomationBlocks(props) {\n  _s();\n\n  const dispatch = useDispatch();\n  const letterSelect = useSelector(state => state.stateLetters.letterSelect);\n  const namesLevelBlock = useSelector(state => state.stateLevelCoins.letterBlocks);\n  const stateLevelCompleted = useSelector(state => state.stateLevelCompleted); //флаги всех кнопок ButtonBlocks\n\n  const stateLevelFinal = useSelector(state => state.stateLevelFinal); //флаги пройденных блоков в листе\n\n  const stateButtonBlockFinal = useSelector(state => state.stateButtonBlockFinal); //флаги пройденных\n\n  const stateFinalLetter = useSelector(state => state.stateFinalLetter); //BUTTON_LEVEL_COMPLETED\n\n  const stateLevelEnd = useSelector(state => state.stateLevelEnd); //флаги не полученных наград за окончание уровня\n\n  const boxCoinsLetter = useSelector(state => state.stateLevelCoins.boxCoinsLetter);\n  const [numberLevelBlock, setNumberLevelBlock] = useState(0);\n  const coins = useSelector(state => state.stateLevelCoins.letterBlocks);\n  const stateLetters = useSelector(state => state.stateLettersBlocks);\n\n  const hendlerSelectLevelBlock = data => {\n    setNumberLevelBlock(data);\n  };\n\n  const hendlerButtonClick = (numberButton, numberButtonBlock) => {\n    dispatch(changeFlagButtonClick(stateLevelCompleted, letterSelect, numberLevelBlock, numberButtonBlock, numberButton)); //получаем массив значений флагов из выбранного ButtonBlocks\n\n    let arrFlags = Object.values(stateLevelCompleted[letterSelect][numberLevelBlock][numberButtonBlock]); // если все флаги чекнуты\n\n    console.log('arrFlags ', arrFlags);\n\n    if (arrFlags.every(x => x === true) === true) {\n      dispatch(changeFlagButtonBlockCompleted(stateButtonBlockFinal, letterSelect, numberLevelBlock, numberButtonBlock)); //теперь проверяем, чекнуты ли все блоки букв уровня\n\n      let arr = stateButtonBlockFinal[letterSelect][numberLevelBlock].filter(x => x === false); // если все блоки пройдены, значит уровень пройден\n\n      if (arr.length === 0) {\n        //помечаем в подсчете пройденных уровней\n        dispatch(changeFlagLevelCompleted(stateLevelFinal, letterSelect, numberLevelBlock)); //проверяем, чекнуты ли все уровни\n\n        let arrCompleted = stateLevelFinal[letterSelect].filter(x => x === false);\n\n        if (arrCompleted.length === 0) {\n          console.log('буква пройдена'); // уровень пройден, в банку падает монетка\n\n          dispatch(boxCoinsDeposit(boxCoinsLetter, letterSelect, coins[numberLevelBlock]));\n          dispatch(finalLetter(stateFinalLetter, letterSelect));\n          dispatch(flagLevelLetterEnd('letter', stateLevelEnd, letterSelect));\n        }\n\n        ;\n      }\n\n      ;\n    }\n\n    ;\n  };\n\n  useEffect(() => {\n    return () => {\n      dispatch(sourceStateLettersBlocks());\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"automation-buttons-blocks\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\u0422\\u0438\\u043F \\u0431\\u0443\\u043A\\u0432\\u044B \", props.typeLetter, \" \\u0431\\u0443\\u043A\\u0432\\u0430 \", letterSelect, /*#__PURE__*/_jsxDEV(SelectingLevelBlock, {\n        numbersLevelBlock: Object.keys(stateLetters),\n        namesLevelBlock: namesLevelBlock,\n        onclick: hendlerSelectLevelBlock,\n        levelsComplied: stateLevelFinal[letterSelect],\n        coins: coins\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(LevelBlock, {\n      numberLevelBlock: numberLevelBlock,\n      namesLevelBlock: namesLevelBlock,\n      coin: coins[numberLevelBlock],\n      stateLetters: stateLetters[numberLevelBlock],\n      onclick: hendlerButtonClick,\n      letterBlockFlags: stateLevelCompleted[letterSelect][numberLevelBlock],\n      buttonBlockCompleted: stateButtonBlockFinal[letterSelect][numberLevelBlock]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(BoxCoinsLevelCompleted, {\n      boxCoinsLetter: boxCoinsLetter[letterSelect]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AutomationBlocks, \"CL2HgeazG08ptAKKS8v4leEmahA=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = AutomationBlocks;\nexport default connect()(AutomationBlocks); //{\n//    stateLevelEnd['letter'][letterSelect] ?\n//        <div>ГОТОВО</div>\n//        : <div>ИСПЫТАНИЕ</div>\n//}\n\nvar _c;\n\n$RefreshReg$(_c, \"AutomationBlocks\");","map":{"version":3,"sources":["D:/Обучение/React/projects/logopedist-game/src/components/Automation/AutomationBlocks.js"],"names":["React","useEffect","useState","connect","useDispatch","useSelector","BoxCoinsLevelCompleted","SelectingLevelBlock","LevelBlock","sourceStateLettersBlocks","changeFlagButtonClick","changeFlagButtonBlockCompleted","changeFlagLevelCompleted","finalLetter","flagLevelLetterEnd","boxCoinsDeposit","AutomationBlocks","props","dispatch","letterSelect","state","stateLetters","namesLevelBlock","stateLevelCoins","letterBlocks","stateLevelCompleted","stateLevelFinal","stateButtonBlockFinal","stateFinalLetter","stateLevelEnd","boxCoinsLetter","numberLevelBlock","setNumberLevelBlock","coins","stateLettersBlocks","hendlerSelectLevelBlock","data","hendlerButtonClick","numberButton","numberButtonBlock","arrFlags","Object","values","console","log","every","x","arr","filter","length","arrCompleted","typeLetter","keys"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport BoxCoinsLevelCompleted from '../../components/Shop/BoxCoinsLevelCompleted';\r\nimport SelectingLevelBlock from '../../UserInterface/SelectingLevelBlock';\r\nimport LevelBlock from '../../components/Automation/LevelBlock';\r\n\r\nimport {\r\n    sourceStateLettersBlocks,\r\n} from '../../store/LettersBlocks/actionsLettersBlocks';\r\nimport {\r\n    changeFlagButtonClick\r\n} from '../../store/LevelCompleted/actionsLevelCompl'; \r\nimport {\r\n    changeFlagButtonBlockCompleted\r\n} from '../../store/LevelCompleted/actionsButtonBlockFinal';\r\nimport {\r\n    changeFlagLevelCompleted\r\n} from '../../store/LevelCompleted/actionsLevelFinal';\r\nimport {\r\n    finalLetter\r\n} from '../../store/LevelCompleted/actionsFinalLetter';\r\nimport {\r\n    flagLevelLetterEnd\r\n} from '../../store/Coins/actionsLetterEnd';\r\nimport {\r\n    boxCoinsDeposit\r\n} from '../../store/Coins/actionsLevelCoins';\r\n\r\nfunction AutomationBlocks(props) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const letterSelect = useSelector(state => state.stateLetters.letterSelect);\r\n    const namesLevelBlock = useSelector(state => state.stateLevelCoins.letterBlocks);\r\n    const stateLevelCompleted = useSelector(state => state.stateLevelCompleted);//флаги всех кнопок ButtonBlocks\r\n    const stateLevelFinal = useSelector(state => state.stateLevelFinal); //флаги пройденных блоков в листе\r\n    const stateButtonBlockFinal = useSelector(state => state.stateButtonBlockFinal);//флаги пройденных\r\n    const stateFinalLetter = useSelector(state => state.stateFinalLetter); //BUTTON_LEVEL_COMPLETED\r\n    const stateLevelEnd = useSelector(state => state.stateLevelEnd); //флаги не полученных наград за окончание уровня\r\n    const boxCoinsLetter = useSelector(state => state.stateLevelCoins.boxCoinsLetter)\r\n\r\n    const [numberLevelBlock, setNumberLevelBlock] = useState(0);\r\n\r\n    const coins = useSelector(state => state.stateLevelCoins.letterBlocks);\r\n    const stateLetters = useSelector(state => state.stateLettersBlocks);\r\n\r\n    const hendlerSelectLevelBlock = (data) => {\r\n        setNumberLevelBlock(data);\r\n    }\r\n\r\n    const hendlerButtonClick = (numberButton, numberButtonBlock) => {\r\n\r\n        dispatch(changeFlagButtonClick(stateLevelCompleted, letterSelect, numberLevelBlock, numberButtonBlock, numberButton));\r\n        //получаем массив значений флагов из выбранного ButtonBlocks\r\n        let arrFlags = Object.values(stateLevelCompleted[letterSelect][numberLevelBlock][numberButtonBlock]);\r\n        // если все флаги чекнуты\r\n        console.log('arrFlags ', arrFlags)\r\n        if (arrFlags.every(x => x === true) === true) {\r\n\r\n            dispatch(changeFlagButtonBlockCompleted(stateButtonBlockFinal, letterSelect, numberLevelBlock, numberButtonBlock));\r\n\r\n            //теперь проверяем, чекнуты ли все блоки букв уровня\r\n            let arr = stateButtonBlockFinal[letterSelect][numberLevelBlock].filter(x => x === false);\r\n\r\n            // если все блоки пройдены, значит уровень пройден\r\n            if (arr.length === 0) {\r\n                //помечаем в подсчете пройденных уровней\r\n                dispatch(changeFlagLevelCompleted(stateLevelFinal, letterSelect, numberLevelBlock));\r\n\r\n                \r\n\r\n                //проверяем, чекнуты ли все уровни\r\n                let arrCompleted = stateLevelFinal[letterSelect].filter(x => x === false);\r\n\r\n\r\n\r\n                if (arrCompleted.length === 0) {\r\n                    console.log('буква пройдена')\r\n                    // уровень пройден, в банку падает монетка\r\n                    dispatch(boxCoinsDeposit(boxCoinsLetter, letterSelect, coins[numberLevelBlock]))\r\n\r\n                    dispatch(finalLetter(stateFinalLetter, letterSelect));\r\n                    dispatch(flagLevelLetterEnd('letter', stateLevelEnd, letterSelect));\r\n                };\r\n            };\r\n        };\r\n    };\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(sourceStateLettersBlocks());\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"automation-buttons-blocks\">\r\n\r\n\r\n            <div>\r\n                Тип буквы {props.typeLetter} буква {letterSelect}\r\n\r\n                <SelectingLevelBlock\r\n                    numbersLevelBlock={Object.keys(stateLetters)}\r\n                    namesLevelBlock={namesLevelBlock}\r\n                    onclick={hendlerSelectLevelBlock}\r\n                    levelsComplied={stateLevelFinal[letterSelect]}\r\n                    coins={coins}\r\n                />\r\n            </div>\r\n\r\n            <LevelBlock\r\n                numberLevelBlock={numberLevelBlock}\r\n                namesLevelBlock={namesLevelBlock}\r\n                coin={coins[numberLevelBlock]}\r\n                stateLetters={stateLetters[numberLevelBlock]}\r\n                onclick={hendlerButtonClick}\r\n                letterBlockFlags={stateLevelCompleted[letterSelect][numberLevelBlock]}\r\n                buttonBlockCompleted={stateButtonBlockFinal[letterSelect][numberLevelBlock]}\r\n                \r\n            />\r\n\r\n            <BoxCoinsLevelCompleted\r\n                boxCoinsLetter={boxCoinsLetter[letterSelect]}\r\n            />\r\n               \r\n        </div>\r\n        \r\n     )\r\n}\r\n\r\nexport default connect()(AutomationBlocks)\r\n\r\n\r\n//{\r\n//    stateLevelEnd['letter'][letterSelect] ?\r\n//        <div>ГОТОВО</div>\r\n//        : <div>ИСПЫТАНИЕ</div>\r\n//}\r\n"]},"metadata":{},"sourceType":"module"}