{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\logopedist-game\\\\src\\\\components\\\\Automation\\\\AutomationBlocks.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport FlagsLevelsСompleted from '../../containers/Automation/FlagsLevelsСompleted';\nimport SelectingLevelBlock from '../../UserInterface/SelectingLevelBlock';\nimport LevelBlock from '../../components/Automation/LevelBlock';\nimport { sourceStateLettersBlocks } from '../../store/LettersBlocks/actionsLettersBlocks';\nimport { changeFlagButtonClick } from '../../store/LevelCompleted/actionsLevelCompl'; //BUTTON_CLICK\n\nimport { changeFlagButtonBlockCompleted } from '../../store/LevelCompleted/actionsButtonBlockFinal'; //BUTTON_BLOCK_COMPLETED\n\nimport { changeFlagLevelCompleted } from '../../store/LevelCompleted/actionsLevelFinal'; //FLAG_FINAL_LETTER\n\nfunction AutomationBlocks(props) {\n  _s();\n\n  const dispatch = useDispatch();\n  const letterSelect = useSelector(state => state.stateLetters.letterSelect);\n  const namesLevelBlock = useSelector(state => state.stateLevelCoins.letterBlocks);\n  const levelsComplied = useSelector(state => state.stateLevelFinal[letterSelect]);\n  const stateLevelCompleted = useSelector(state => state.stateLevelCompleted);\n  const stateLevelFinal = useSelector(state => state.stateLevelFinal);\n  const stateButtonBlockFinal = useSelector(state => state.stateButtonBlockFinal);\n  const stateFinalLetter = useSelector(state => state.stateFinalLetter);\n  const [numberLevelBlock, setNumberLevelBlock] = useState(0);\n  const coin = useSelector(state => state.stateLevelCoins.letterBlocks[numberLevelBlock]);\n  const stateLetters = useSelector(state => state.stateLettersBlocks[numberLevelBlock]);\n\n  const hendlerSelectLevelBlock = data => {\n    setNumberLevelBlock(data);\n  };\n\n  const hendlerButtonClick = (numberButton, numberButtonBlock) => {\n    dispatch(changeFlagButtonClick(stateLevelCompleted, letterSelect, numberLevelBlock, numberButtonBlock, numberButton)); //получаем массив значений флагов из выбранного ButtonBlocks\n\n    let arrFlags = Object.values(stateLevelCompleted[letterSelect][numberLevelBlock][numberButtonBlock]); // если все флаги чекнуты\n\n    console.log('arrFlags ', arrFlags);\n\n    if (arrFlags.every(x => x === true) === true) {\n      dispatch(changeFlagButtonBlockCompleted(stateButtonBlockFinal, letterSelect, numberLevelBlock, numberButtonBlock));\n      let arr = stateLevelFinal[letterSelect];\n      let j = 0;\n\n      for (let i = 0; i < arr.length; i++) {\n        if (i !== numberLevelBlock) {\n          if (arr[i] === true) {\n            j++;\n          }\n\n          ;\n        }\n\n        ;\n      }\n\n      ;\n\n      if (j === 5) {\n        dispatch(changeFlagLevelCompleted(stateFinalLetter, letterSelect));\n      }\n\n      ;\n    }\n\n    ;\n  };\n\n  useEffect(() => {\n    return () => {\n      dispatch(sourceStateLettersBlocks());\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"automation-buttons-blocks\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\u0422\\u0438\\u043F \\u0431\\u0443\\u043A\\u0432\\u044B \", props.typeLetter, \" \\u0431\\u0443\\u043A\\u0432\\u0430 \", letterSelect, /*#__PURE__*/_jsxDEV(SelectingLevelBlock, {\n        namesLevelBlock: namesLevelBlock,\n        onclick: hendlerSelectLevelBlock,\n        levelsComplied: levelsComplied\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(LevelBlock, {\n      numberLevelBlock: numberLevelBlock,\n      namesLevelBlock: namesLevelBlock,\n      coin: coin,\n      stateLetters: stateLetters,\n      onclick: hendlerButtonClick,\n      letterBlockFlags: stateLevelCompleted[letterSelect][numberLevelBlock],\n      buttonBlockCompleted: stateButtonBlockFinal[letterSelect][numberLevelBlock]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FlagsLevelsСompleted, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AutomationBlocks, \"nybPJvhLC4qUko0djInu23r3yqw=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = AutomationBlocks;\nexport default connect()(AutomationBlocks); //const levelSelect = (data) => {\n//    for (let i = 0; i < data.length; i++) {\n//        if (data[i] === false) {\n//            return i\n//        };\n//    };\n//};\n//const [numberLevelBlock, setNumberLevelBlock] = useState(levelSelect(levelsComplied));\n\nvar _c;\n\n$RefreshReg$(_c, \"AutomationBlocks\");","map":{"version":3,"sources":["D:/Обучение/React/projects/logopedist-game/src/components/Automation/AutomationBlocks.js"],"names":["React","useEffect","useState","connect","useDispatch","useSelector","FlagsLevelsСompleted","SelectingLevelBlock","LevelBlock","sourceStateLettersBlocks","changeFlagButtonClick","changeFlagButtonBlockCompleted","changeFlagLevelCompleted","AutomationBlocks","props","dispatch","letterSelect","state","stateLetters","namesLevelBlock","stateLevelCoins","letterBlocks","levelsComplied","stateLevelFinal","stateLevelCompleted","stateButtonBlockFinal","stateFinalLetter","numberLevelBlock","setNumberLevelBlock","coin","stateLettersBlocks","hendlerSelectLevelBlock","data","hendlerButtonClick","numberButton","numberButtonBlock","arrFlags","Object","values","console","log","every","x","arr","j","i","length","typeLetter"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport FlagsLevelsСompleted from '../../containers/Automation/FlagsLevelsСompleted';\r\nimport SelectingLevelBlock from '../../UserInterface/SelectingLevelBlock';\r\nimport LevelBlock from '../../components/Automation/LevelBlock';\r\n\r\nimport {\r\n    sourceStateLettersBlocks,\r\n} from '../../store/LettersBlocks/actionsLettersBlocks';\r\nimport {\r\n    changeFlagButtonClick\r\n} from '../../store/LevelCompleted/actionsLevelCompl'; //BUTTON_CLICK\r\nimport {\r\n    changeFlagButtonBlockCompleted\r\n} from '../../store/LevelCompleted/actionsButtonBlockFinal';//BUTTON_BLOCK_COMPLETED\r\nimport {\r\n    changeFlagLevelCompleted\r\n} from '../../store/LevelCompleted/actionsLevelFinal';//FLAG_FINAL_LETTER\r\n\r\nfunction AutomationBlocks(props) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const letterSelect = useSelector(state => state.stateLetters.letterSelect);\r\n    const namesLevelBlock = useSelector(state => state.stateLevelCoins.letterBlocks);\r\n    const levelsComplied = useSelector(state => state.stateLevelFinal[letterSelect]);\r\n    const stateLevelCompleted = useSelector(state => state.stateLevelCompleted);\r\n    const stateLevelFinal = useSelector(state => state.stateLevelFinal);\r\n    const stateButtonBlockFinal = useSelector(state => state.stateButtonBlockFinal);\r\n    const stateFinalLetter = useSelector(state => state.stateFinalLetter);\r\n\r\n\r\n    const [numberLevelBlock, setNumberLevelBlock] = useState(0);\r\n\r\n    const coin = useSelector(state => state.stateLevelCoins.letterBlocks[numberLevelBlock]);\r\n    const stateLetters = useSelector(state => state.stateLettersBlocks[numberLevelBlock]);\r\n\r\n    const hendlerSelectLevelBlock = (data) => {\r\n        setNumberLevelBlock(data);\r\n    }\r\n\r\n    const hendlerButtonClick = (numberButton, numberButtonBlock) => {\r\n\r\n        dispatch(changeFlagButtonClick(stateLevelCompleted, letterSelect, numberLevelBlock, numberButtonBlock, numberButton));\r\n        //получаем массив значений флагов из выбранного ButtonBlocks\r\n        let arrFlags = Object.values(stateLevelCompleted[letterSelect][numberLevelBlock][numberButtonBlock]);\r\n        // если все флаги чекнуты\r\n        console.log('arrFlags ', arrFlags)\r\n        if (arrFlags.every(x => x === true) === true) {\r\n            dispatch(changeFlagButtonBlockCompleted(stateButtonBlockFinal, letterSelect, numberLevelBlock, numberButtonBlock));\r\n\r\n            let arr = stateLevelFinal[letterSelect];\r\n            let j = 0;\r\n            for (let i = 0; i < arr.length; i++) {\r\n                if (i !== numberLevelBlock) {\r\n                    if (arr[i] === true) {\r\n                        j++;\r\n                    };\r\n                };\r\n            };\r\n            if (j === 5) {\r\n                dispatch(changeFlagLevelCompleted(stateFinalLetter, letterSelect))\r\n            };\r\n        };\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(sourceStateLettersBlocks());\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"automation-buttons-blocks\">\r\n\r\n            <div>\r\n                Тип буквы {props.typeLetter} буква {letterSelect}\r\n\r\n                <SelectingLevelBlock\r\n                    namesLevelBlock={namesLevelBlock}\r\n                    onclick={hendlerSelectLevelBlock}\r\n                    levelsComplied={levelsComplied}\r\n                />\r\n            </div>\r\n\r\n            <LevelBlock\r\n                numberLevelBlock={numberLevelBlock}\r\n                namesLevelBlock={namesLevelBlock}\r\n                coin={coin}\r\n                stateLetters={stateLetters}\r\n                onclick={hendlerButtonClick}\r\n                letterBlockFlags={stateLevelCompleted[letterSelect][numberLevelBlock]}\r\n                buttonBlockCompleted={stateButtonBlockFinal[letterSelect][numberLevelBlock]}\r\n            />\r\n\r\n            <FlagsLevelsСompleted />\r\n               \r\n        </div>\r\n        \r\n     )\r\n}\r\n\r\nexport default connect()(AutomationBlocks)\r\n\r\n\r\n//const levelSelect = (data) => {\r\n//    for (let i = 0; i < data.length; i++) {\r\n//        if (data[i] === false) {\r\n//            return i\r\n//        };\r\n//    };\r\n//};\r\n\r\n//const [numberLevelBlock, setNumberLevelBlock] = useState(levelSelect(levelsComplied));\r\n"]},"metadata":{},"sourceType":"module"}