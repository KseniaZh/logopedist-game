{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\logopedist-game\\\\src\\\\containers\\\\Navigation\\\\Header.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { connect, useSelector } from \"react-redux\";\nimport NavigationConsole from '../../UserInterface/NavigationConsole';\nimport WindowBlind from '../../components/Header/WindowBlind';\nimport Button from '../../UserInterface/Buttons/Button';\n\nfunction Header(props) {\n  _s();\n\n  const stateNavigationConsole = [{\n    to: '/',\n    name: 'Home'\n  }, {\n    to: '/prizeShop',\n    name: 'Выбор награды'\n  }, {\n    to: '/progress',\n    name: 'Прогресс'\n  }, {\n    to: '/automation',\n    name: 'Автоматизация звуков в слогах'\n  }, {\n    to: '/wordsAutomation',\n    name: 'Автоматизация звуков в словах'\n  }];\n  const [isOpen, setIsOpen] = useState(false);\n  const navStyle = ['Navigation'];\n\n  if (!isOpen) {\n    navStyle.push('close');\n  }\n\n  ;\n\n  const hendlerNavHide = () => {\n    setIsOpen(false);\n  };\n\n  const hendlerNavShow = () => {\n    setIsOpen(true);\n  };\n\n  const stateFinalLetter = useSelector(state => state.stateFinalLetter);\n  const LevelEndLetter = useSelector(state => state.stateLevelEnd['letter']); //флаг не полученной медали\n\n  const LevelEndWord = useSelector(state => state.stateLevelEnd['word']); //флаг не полученной медали\n\n  const arrLettersLevelEndLetter = Object.keys(LevelEndLetter); //массив букв\n\n  const arrFlagsLevelEndLetter = Object.values(LevelEndLetter); //массив флагов\n\n  const arrLettersLevelEndWord = Object.keys(LevelEndWord); //массив букв\n\n  const arrFlagsLevelEndWord = Object.values(LevelEndWord); //массив флагов\n\n  const hendlerNullAllFlagsLettersBeginAgain = () => {};\n\n  return /*#__PURE__*/_jsxDEV(\"header\", {\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      onMouseOver: hendlerNavShow,\n      onMouseOut: hendlerNavHide,\n      onClick: hendlerNavHide,\n      className: navStyle.join(' '),\n      children: /*#__PURE__*/_jsxDEV(NavigationConsole, {\n        stateNavigationConsole: stateNavigationConsole,\n        onclick: () => console.log('click Header NavigationConsole')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      classname: \"null-all-letters-begin-again\",\n      onclick: hendlerNullAllFlagsLettersBeginAgain,\n      name: \"\\u0412\\u0421\\u0415 \\u0411\\u0423\\u041A-\\u0412\\u042B \\u0421\\u041D\\u0410-\\u0427\\u0410-\\u041B\\u0410\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), isOpen ? /*#__PURE__*/_jsxDEV(WindowBlind, {\n      onclick: hendlerNavHide,\n      classname: \"NavigationWindowBlind\",\n      finalLetter: stateFinalLetter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 21\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Header, \"uOHV2KpU2P9neAkQeLxBCIYSgr8=\", false, function () {\n  return [useSelector, useSelector, useSelector];\n});\n\n_c = Header;\nexport default connect()(Header); //function Header(props) {\n//    const dispatch = useDispatch();\n//    const login = useSelector(state => state.stateAuthorization.user.login);\n//    const [isOpen, setIsOpen] = useState(false);\n//    const hendlerNavigationToggle = () => {\n//        if (isOpen === false) {\n//            dispatch(saveDataStore({}));\n//        }\n//        setIsOpen(!isOpen);\n//    };\n//    const navStyle = [stateStylesAll[staleSelect].navigation];\n//    if (!isOpen) {\n//        navStyle.push(\"close\");\n//    };\n//    const pages = [\n//        {\n//            to: '/',\n//            name: 'Home'\n//        },\n//        {\n//            to: '/EltypeClass',\n//            name: 'EltypeClass'\n//        },\n//        {\n//            to: '/ViewType',\n//            name: 'ViewType'\n//        }\n//    ]\n//    // логика всплывающей подсказки спрятана в обертку hoc, \n//    // обертка кнопок и подсказка реализованы в ButtonNavigationSmall и ButtonNavigation\n//    const ButtonNavigationSmall = withHoverDescription(ButtonLinkSmall, DescriptionNavigation);\n//    const ButtonNavigation = withHoverDescription(ButtonLink, DescriptionNavigation);\n//    return (\n//        <header>\n//            <nav className={navStyle.join(' ')}>\n//                <ButtonNavigationSmall\n//                    to='/Personalize'\n//                    icon=\"fa fa-user-circle-o\"\n//                    classname={stateStylesAll[staleSelect].personalizeButton}\n//                    name='Personalize'\n//                    onclick={() => setIsOpen(false)}\n//                    tabindex=\"-1\"\n//                    haveDescription={isOpen}\n//                    classnameDescription={stateStylesAll[staleSelect].navigationLinkAbout}\n//                />\n//                {\n//                    login === \"administrator\" ?\n//                        <ButtonNavigation\n//                            to='/User'\n//                            name='User'\n//                            onclick={() => setIsOpen(false)}\n//                            classname={stateStylesAll[staleSelect].navigationButtonLink}\n//                            tabIndex='2'\n//                            haveDescription={isOpen}\n//                            classnameDescription={stateStylesAll[staleSelect].navigationLinkAbout}\n//                        />\n//                        : null\n//                }\n//                {\n//                    pages.map((page, index) =>\n//                        <ButtonNavigation\n//                            to={page.to}\n//                            name={page.name}\n//                            onclick={() => setIsOpen(false)}\n//                            classname={stateStylesAll[staleSelect].navigationButtonLink}\n//                            tabIndex={index + 2}\n//                            key={index + 2}\n//                            haveDescription={isOpen}\n//                            classnameDescription={stateStylesAll[staleSelect].navigationLinkAbout}\n//                        />)\n//                }\n//            </nav>\n//            {\n//                isOpen ?\n//                    <NavigationWindowBlind\n//                        onclick={() => setIsOpen(false)}\n//                        classname={stateStylesAll[staleSelect].navigationWindowBlind}\n//                    />\n//                    : null\n//            }\n//            <NavigationToggle\n//                openNavigation={hendlerNavigationToggle}\n//                isOpen={isOpen}\n//                classname={stateStylesAll[staleSelect].navigationToggle}\n//            />\n//        </header>\n//    )\n//}\n//export default connect()(Header)\n\nvar _c;\n\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"sources":["D:/Обучение/React/projects/logopedist-game/src/containers/Navigation/Header.js"],"names":["React","useState","connect","useSelector","NavigationConsole","WindowBlind","Button","Header","props","stateNavigationConsole","to","name","isOpen","setIsOpen","navStyle","push","hendlerNavHide","hendlerNavShow","stateFinalLetter","state","LevelEndLetter","stateLevelEnd","LevelEndWord","arrLettersLevelEndLetter","Object","keys","arrFlagsLevelEndLetter","values","arrLettersLevelEndWord","arrFlagsLevelEndWord","hendlerNullAllFlagsLettersBeginAgain","join","console","log"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { connect, useSelector } from \"react-redux\";\r\n\r\nimport NavigationConsole from '../../UserInterface/NavigationConsole';\r\nimport WindowBlind from '../../components/Header/WindowBlind';\r\nimport Button from '../../UserInterface/Buttons/Button';\r\n\r\n\r\nfunction Header(props) {\r\n\r\n    const stateNavigationConsole = [\r\n        {\r\n            to: '/',\r\n            name: 'Home'\r\n        },\r\n        {\r\n            to: '/prizeShop',\r\n            name: 'Выбор награды'\r\n        },\r\n        {\r\n            to: '/progress',\r\n            name: 'Прогресс'\r\n        },\r\n        {\r\n            to: '/automation',\r\n            name: 'Автоматизация звуков в слогах'\r\n        },\r\n        {\r\n            to: '/wordsAutomation',\r\n            name: 'Автоматизация звуков в словах'\r\n        }\r\n    ]\r\n\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const navStyle = ['Navigation'];\r\n\r\n    if (!isOpen) {\r\n        navStyle.push('close');\r\n    };\r\n\r\n    const hendlerNavHide = () => {\r\n        setIsOpen(false);\r\n    }\r\n    const hendlerNavShow = () => {\r\n        setIsOpen(true);\r\n    }\r\n\r\n    const stateFinalLetter = useSelector(state => state.stateFinalLetter);\r\n    const LevelEndLetter = useSelector(state => state.stateLevelEnd['letter']);//флаг не полученной медали\r\n    const LevelEndWord = useSelector(state => state.stateLevelEnd['word']);//флаг не полученной медали\r\n\r\n    const arrLettersLevelEndLetter = Object.keys(LevelEndLetter); //массив букв\r\n    const arrFlagsLevelEndLetter = Object.values(LevelEndLetter); //массив флагов\r\n\r\n    const arrLettersLevelEndWord = Object.keys(LevelEndWord); //массив букв\r\n    const arrFlagsLevelEndWord = Object.values(LevelEndWord); //массив флагов\r\n\r\n    const hendlerNullAllFlagsLettersBeginAgain = () => {\r\n\r\n    }\r\n\r\n    return (\r\n        <header>\r\n            <nav\r\n                onMouseOver={hendlerNavShow}\r\n                onMouseOut={hendlerNavHide}\r\n                onClick={hendlerNavHide}\r\n                className={navStyle.join(' ')}\r\n            >\r\n                <NavigationConsole\r\n                    stateNavigationConsole={stateNavigationConsole}\r\n                    onclick={()=>console.log('click Header NavigationConsole')}\r\n                />\r\n               \r\n                \r\n            </nav>\r\n            <Button\r\n                classname='null-all-letters-begin-again'\r\n                onclick={hendlerNullAllFlagsLettersBeginAgain}\r\n                name=\"ВСЕ БУК-ВЫ СНА-ЧА-ЛА\"\r\n            />\r\n\r\n            {\r\n                isOpen ?\r\n                    <WindowBlind\r\n                        onclick={hendlerNavHide}\r\n                        classname='NavigationWindowBlind'\r\n                        finalLetter={stateFinalLetter}\r\n                    />\r\n                    : null\r\n            }\r\n           \r\n\r\n        </header>\r\n    )\r\n}\r\nexport default connect()(Header)\r\n\r\n\r\n//function Header(props) {\r\n\r\n//    const dispatch = useDispatch();\r\n//    const login = useSelector(state => state.stateAuthorization.user.login);\r\n\r\n\r\n//    const [isOpen, setIsOpen] = useState(false);\r\n\r\n//    const hendlerNavigationToggle = () => {\r\n//        if (isOpen === false) {\r\n//            dispatch(saveDataStore({}));\r\n//        }\r\n//        setIsOpen(!isOpen);\r\n//    };\r\n\r\n//    const navStyle = [stateStylesAll[staleSelect].navigation];\r\n//    if (!isOpen) {\r\n//        navStyle.push(\"close\");\r\n//    };\r\n\r\n//    const pages = [\r\n//        {\r\n//            to: '/',\r\n//            name: 'Home'\r\n//        },\r\n//        {\r\n//            to: '/EltypeClass',\r\n//            name: 'EltypeClass'\r\n//        },\r\n//        {\r\n//            to: '/ViewType',\r\n//            name: 'ViewType'\r\n//        }\r\n//    ]\r\n//    // логика всплывающей подсказки спрятана в обертку hoc, \r\n//    // обертка кнопок и подсказка реализованы в ButtonNavigationSmall и ButtonNavigation\r\n//    const ButtonNavigationSmall = withHoverDescription(ButtonLinkSmall, DescriptionNavigation);\r\n//    const ButtonNavigation = withHoverDescription(ButtonLink, DescriptionNavigation);\r\n\r\n//    return (\r\n//        <header>\r\n//            <nav className={navStyle.join(' ')}>\r\n\r\n//                <ButtonNavigationSmall\r\n//                    to='/Personalize'\r\n//                    icon=\"fa fa-user-circle-o\"\r\n//                    classname={stateStylesAll[staleSelect].personalizeButton}\r\n//                    name='Personalize'\r\n//                    onclick={() => setIsOpen(false)}\r\n//                    tabindex=\"-1\"\r\n//                    haveDescription={isOpen}\r\n//                    classnameDescription={stateStylesAll[staleSelect].navigationLinkAbout}\r\n//                />\r\n//                {\r\n//                    login === \"administrator\" ?\r\n//                        <ButtonNavigation\r\n//                            to='/User'\r\n//                            name='User'\r\n//                            onclick={() => setIsOpen(false)}\r\n//                            classname={stateStylesAll[staleSelect].navigationButtonLink}\r\n//                            tabIndex='2'\r\n//                            haveDescription={isOpen}\r\n//                            classnameDescription={stateStylesAll[staleSelect].navigationLinkAbout}\r\n//                        />\r\n//                        : null\r\n//                }\r\n//                {\r\n//                    pages.map((page, index) =>\r\n//                        <ButtonNavigation\r\n//                            to={page.to}\r\n//                            name={page.name}\r\n//                            onclick={() => setIsOpen(false)}\r\n//                            classname={stateStylesAll[staleSelect].navigationButtonLink}\r\n//                            tabIndex={index + 2}\r\n//                            key={index + 2}\r\n//                            haveDescription={isOpen}\r\n//                            classnameDescription={stateStylesAll[staleSelect].navigationLinkAbout}\r\n//                        />)\r\n//                }\r\n\r\n//            </nav>\r\n\r\n//            {\r\n//                isOpen ?\r\n//                    <NavigationWindowBlind\r\n//                        onclick={() => setIsOpen(false)}\r\n//                        classname={stateStylesAll[staleSelect].navigationWindowBlind}\r\n//                    />\r\n//                    : null\r\n//            }\r\n\r\n//            <NavigationToggle\r\n//                openNavigation={hendlerNavigationToggle}\r\n//                isOpen={isOpen}\r\n//                classname={stateStylesAll[staleSelect].navigationToggle}\r\n//            />\r\n\r\n//        </header>\r\n//    )\r\n//}\r\n//export default connect()(Header)\r\n\r\n"]},"metadata":{},"sourceType":"module"}